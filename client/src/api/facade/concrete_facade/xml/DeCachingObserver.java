/*
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Copyright (c) 1999 - 2006 Applera Corporation.
 301 Merritt 7 
 P.O. Box 5435 
 Norwalk, CT 06856-5435 USA

 This is free software; you can redistribute it and/or modify it under the 
 terms of the GNU Lesser General Public License as published by the 
 Free Software Foundation; version 2.1 of the License.

 This software is distributed in the hope that it will be useful, but 
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE. 
 See the GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License 
 along with this software; if not, write to the Free Software Foundation, Inc.
 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
*/
package api.facade.concrete_facade.xml;

/**
 * Title:        De-Caching Observer
 * Description:  Observes events generated by Genome Versions, to decide
 *               what needs to be released from a facade manager, and executes.
 * @author Les Foster
 * @version $Id$
 */
import api.entity_model.access.observer.GenomeVersionObserver;
import api.entity_model.access.observer.GenomeVersionObserverAdapter;
import api.entity_model.access.observer.ModelMgrObserverAdapter;
import api.entity_model.management.ModelMgr;
import api.entity_model.model.annotation.Feature;
import api.entity_model.model.fundtype.GenomicEntity;
import api.entity_model.model.genetics.GenomeVersion;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

/**
 * Observer for addition/deletion of Genome Versions.
 */
public class DeCachingObserver extends ModelMgrObserverAdapter {

    //-------------------------------------INSTANCE VARIABLES
    private XmlFacadeManager mManager;
    private Map mGvObserverMap;

    //-------------------------------------CONSTRUCTORS
    /**
     * Keep the ref to the facade manager, so its data can be modified
     * as needed.
     */
    public DeCachingObserver(XmlFacadeManager facadeManager) {
        mManager = facadeManager;
        if (mManager == null)
            throw new IllegalArgumentException("Must construct this object with an XmlFacadeManager");

        mGvObserverMap = new HashMap();
        for (Iterator it = ModelMgr.getModelMgr().getSelectedGenomeVersions().iterator(); it.hasNext(); ) {
            GenomeVersion gv = (GenomeVersion)it.next();
            genomeVersionAdded(gv);
        } // For all known genome versions.
        ModelMgr.getModelMgr().addModelMgrObserver(this);
    } // End constructor

    //-------------------------------------INTERFACE METHODS
    /** Tells to unregister as a listener. */
    public void unlisten() {
        ModelMgr.getModelMgr().removeModelMgrObserver(this);
    } // End method

    //-------------------------------------OVERRIDES TO ModelMgrObserverAdapter
    /** Called when there is a new genome version to be heard. */
    public void genomeVersionSelected(GenomeVersion genomeVersion) {
        GenomeVersionObserver observer = new FacadeDeCacher();
        genomeVersion.addGenomeVersionObserver(observer); // Q: need up-to-date?
        mGvObserverMap.put(new Integer(genomeVersion.getID()), observer);
    } // End method

    /** Called when that GV is no longer relevant. */
    public void genomeVersionUnselected(GenomeVersion genomeVersion){
        GenomeVersionObserver observer = (GenomeVersionObserver)mGvObserverMap.get(new Integer(genomeVersion.getID()));
        if (observer != null) {
            mGvObserverMap.remove(new Integer(genomeVersion.getID()));
            genomeVersion.removeGenomeVersionObserver(observer);
        } // Had one.
    } // End method

    //-------------------------------------INNER CLASSES
    /**
     * Listens for 'removed' entities from a genome version in the model.
     * 'Facade de Cacher'--French for 'I've rumbled your game'.
     */
    class FacadeDeCacher extends GenomeVersionObserverAdapter {
        private int mMostRecentGVId = -1;
        // NOTE: caching the loaders makes this process go about 20 x faster!
        private XmlLoader[] mLoaders;

        /** Called whenever the observed GV looses an entity. */
        public void noteEntityRemovedFromGenomeVersion(GenomicEntity entity) {
            if (entity instanceof Feature) {
                // ONLY look at root features.
                if (((Feature)entity).getSuperFeature() != null)
                    return;

                GenomeVersionSpace genomeVersionSpace = mManager.getGenomeVersionSpace();
                if (genomeVersionSpace.getGenomeVersions().length == 0)
                    return;

                if ((entity.getGenomeVersion().getID() != mMostRecentGVId) || (mLoaders == null)) {
                    mMostRecentGVId = entity.getGenomeVersion().getID();

                    Iterator sourceIterator = genomeVersionSpace.getSearchableInputSources(entity.getGenomeVersion().getID());
                    List sourceList = new ArrayList();
                    while (sourceIterator.hasNext()) {
                        sourceList.add(sourceIterator.next());
                    } // For all sources.
                    mLoaders = new XmlLoader[sourceList.size()];
                    sourceList.toArray(mLoaders);
                } // Got a new ID.

                for (int i = 0; i < mLoaders.length; i++) {
                    mLoaders[i].removeFeature(entity.getOid());
                } // For all sources

            } // Got FM
        } // End method
    } // End class

} // End class
