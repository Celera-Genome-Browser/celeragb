<?xml version="1.0" encoding="US-ASCII"?>
<!--
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Copyright (c) 1999 - 2006 Applera Corporation.
 301 Merritt 7 
 P.O. Box 5435 
 Norwalk, CT 06856-5435 USA

 This is free software; you can redistribute it and/or modify it under the 
 terms of the GNU Lesser General Public License as published by the 
 Free Software Foundation; version 2.1 of the License.

 This software is distributed in the hope that it will be useful, but 
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE. 
 See the GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License 
 along with this software; if not, write to the Free Software Foundation, Inc.
 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
-->

<!--*================================================================================*-->
<!--* FILE:                                                                          *-->
<!--*    api_build.xml                                                               *-->
<!--* DESCRIPTION:                                                                   *-->
<!--*    XML build instructions file used by Ant to build the specified APIs. The    *-->
<!--*    useful targets can be seen by executing the following on a command line:    *-->
<!--*                                                                                *-->
<!--*    ant -projecthelp -buildfile ./api_build.xml                                 *-->
<!--*                                                                                *-->
<!--* PROPERTIES:                                                                    *-->
<!--*    api.type                - Mandatory. The API type being built. Valid values *-->
<!--*                              are:                                              *-->
<!--*                                  gbapi - Genome Browser APIs                   *-->
<!--*                                  capi  - Genomics APIs                           *-->
<!--*                              The type is passed in on the command line.        *-->
<!--*    api.home.dir            - Mandatory. The home directory in which all builds *-->
<!--*                              are done.                                         *-->
<!--*    api.build.dir           - Mandatory. The build subdirectory.                *-->
<!--*    api.root.dir            - The fully-qualified root build directory. This    *-->
<!--*                              property is assumed to be concatenation of the    *-->
<!--*                              home and build directory properties.              *-->
<!--*    api.src.dir             - The directory containing the Java source files.   *-->
<!--*                              This property is assumed to be the concatenation  *-->
<!--*                              of the root directory property and \src.          *-->
<!--*    api.lib.dir             - The directory containing third-party JAR files.   *-->
<!--*                              This property is assumed to be the concatenation  *-->
<!--*                              of the root directory property and \lib.          *-->
<!--*    api.bin.dir             - The directory containing shell scripts, class     *-->
<!--*                              files, JAR files, and resource files. This        *-->
<!--*                              property is assumed to be the concatenation of    *-->
<!--*                              the root directory property and \bin.             *-->
<!--*    api.sql.dir             - The directory containing SQL files. This property *-->
<!--*                              is assumed to be the concatenation of the root    *-->
<!--*                              directory property and \sql.                      *-->
<!--*    api.meta.dir            - The directory containing the EJB deployment       *-->
<!--*                              descriptors. This property is assumed to be the   *-->
<!--*                              concatenation of the bin directory property and   *-->
<!--*                              \META-INF.                                        *-->
<!--*    api.src.files           - Manadatory. The source file directory and name    *-->
<!--*                              patterns to include in the build.                 *-->
<!--*    api.class.files         - Manadatory. The class file directory and name     *-->
<!--*                              patterns to include in the build.                 *-->
<!--*    api.classpath           - Mandatory. The classpath used by the compiler to  *-->
<!--*                              resolve compilation dependencies.                 *-->
<!--*    api.props.file          - The properties file used to override properties   *-->
<!--*                              in the project build XML file. This property can  *-->
<!--*                              be passed in (see the api_build.cmd script).      *-->
<!--*    api.jbuilder.project.file - The JBuilder project file used for compilation  *-->
<!--*    api.contact.email       - The API team email address.                       *-->
<!--*    api.ids.version         - The IDS schema version the build is targeting.    *-->
<!--*                                                                                *-->
<!--*                                                                                *-->
<!--*    api.inter.jar.exists    - The interfaces JAR file exists in the current or  *-->
<!--*                              specified build directory.                        *-->
<!--*    api.impls.jar.exists    - The implementation JAR file exists in the current *-->
<!--*                              or specified build directory.                     *-->
<!--*    api.res.jar.exists      - The resource JAR file exists in the current or    *-->
<!--*                              specified build directory.                        *-->
<!--*    api.stubs.jar.exists    - The client stubs JAR file exists in the current   *-->
<!--*                              or specified build directory.                     *-->
<!--*    api.featureservlet.jar.exists - The FeatureServlet JAR file exists in the current *-->
<!--*    build.dir.exists        - The build directory exists.                       *-->
<!--*    deploy.dir.exists       - The local deployment directory exists.            *-->
<!--*                                                                                *-->
<!--*                                                                                *-->
<!--*    wl.home                 - The home directory location of WebLogic. This     *-->
<!--*                              can be overridden by specifying an environment    *-->
<!--*                              variable called WL_HOME which will be picked up   *-->
<!--*                              by the build script.                              *-->
<!--*    wl.compiler             - The compiler used by WebLogic to perform the RMI  *-->
<!--*                              compilation of the EJBs.                          *-->
<!--*    wl.classpath            - The classpath used by the WebLogic tools to       *-->
<!--*                              perform the EJB compilation.                      *-->
<!--*                                                                                *-->
<!--*                                                                                *-->
<!--*    build.compiler          - Optional. The flag indicating which compiler to   *-->
<!--*                              use. Valid values are:                            *-->
<!--*                                  classic - JDK 1.1/1.2 compiler.               *-->
<!--*                                  modern  - JDK 1.3 compiler.                   *-->
<!--*                                  jikes   - IBM Jikes compiler.                 *-->
<!--*    java.debug              - Optional. The flag turning compiler debug         *-->
<!--*                              information on or off. Defaults to on.            *-->
<!--*    java.deprecation        - Optional. The flag turning deprecation messages   *-->
<!--*                              on or off. Defaults to off.                       *-->
<!--*    java.optimize           - Optional. The flag turning compiler optimization  *-->
<!--*                              on or off. Defaults to on.                        *-->
<!--*                                                                                *-->
<!--*                                                                                *-->
<!--*    cvs.module              - The name of the CVS module to checkout or update. *-->
<!--*                              The module name must be specified in the project  *-->
<!--*                              build instructions XML file.                      *-->
<!--*    cvs.branch.tag          - The tag to use to identify the code branch to be  *-->
<!--*                              checked out of CVS. Defaults to HEAD. The tag can *-->
<!--*                              be specified in the project build instructions    *-->
<!--*                              XML file.                                         *-->
<!--*    cvs.login.id            - The user ID used to login to CVS. The login       *-->
<!--*                              ID can be specified in the project build          *-->
<!--*                              instructions XML file.                            *-->
<!--*    cvs.passwd.file         - The location of the CVS password file for the     *-->
<!--*                              user. Defaults to the user's home directory. The  *-->
<!--*                              password file location can be overridden in the   *-->
<!--*                              project build instructions XML file.              *-->
<!--*    cvs.server.host         - The CVS host server. The server host name can     *-->
<!--*                              be overridden in the project build instructions   *-->
<!--*                              XML file.                                         *-->
<!--*    cvs.rep.root            - The server host directory location that is the    *-->
<!--*                              CVS repository root directory. The repository     *-->
<!--*                              root can be overridden in the project build       *-->
<!--*                              instructions XML file.                            *-->
<!--*    cvs.root                - The CVS root. The CVS root can be overridden in   *-->
<!--*                              the project build instructions XML file.          *-->
<!--*================================================================================*-->

<project name="api-build" default="build-all" basedir=".">

   <!--*===================================================================*-->
   <!--* Taskdef: EjbJar. Declare the EJB compiler task from the Ant       *-->
   <!--* optional task JAR file.                                           *-->
   <!--*===================================================================*-->
   <taskdef name="EjbJar" classname="org.apache.tools.ant.taskdefs.optional.ejb.EjbJar"/>


   <!--*===================================================================*-->
   <!--* Target: build-all. Performs a complete build of the specified API.      *-->
   <!--*===================================================================*-->
   <target name="build-all" depends="init,make-build-dir,code-checkout,compile,jar-all" description="Default. Performs a complete build.">
      <echo message="Full build of HEAD_${api.type} for branch ${cvs.branch.tag} is complete..."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: code-checkout. Performs a CVS code checkout.              *-->
   <!--*===================================================================*-->
   <target name="code-checkout" depends="init,make-build-dir,cvs-checkout" description="Checks out the specified CVS module.">
      <echo message="Code checkout of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: code-update. Performs a CVS code update.                  *-->
   <!--*===================================================================*-->
   <target name="code-update" depends="init,make-build-dir,cvs-update" description="Updates an existing code repository.">
      <echo message="Code checkout of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: compile. Performs a code build.                           *-->
   <!--*===================================================================*-->
   <target name="compile" depends="init,java-compile" description="Compiles all source files in the build directory. If none exists, the specified module will be checked out.">
      <echo message="Code compile of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: code-checkout. Performs a CVS code checkout.              *-->
   <!--*===================================================================*-->
   <target name="rmi-compile" depends="init,rmic" description="Performs RMI compile.">
      <echo message="RMI compile of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: devel-build. Performs an EJB compile and deploys to the   *-->
   <!--* the developers local server.                                      *-->
   <!--*===================================================================*-->
   <target name="devel-build" depends="init,ejb-compile,deploy-to-devel,jar-resources" description="Performs an EJB compile and deploys to the interfaces JAR to the local WebLogic development server.">
      <echo message="Interfaces JAR for ${api.type} deployed to ${wl.home}/Genomics/${api.type}/${api.type}_interfaces.jar"/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: jar-all. Creates all JAR files.                           *-->
   <!--*===================================================================*-->
   <target name="jar-all" depends="init,rmi-compile,ejbc,jar-impls,jar-resources,jar-stubs,jar-featureservlet" description="Creates all of the necessary deployment JAR files.">
      <echo message="JAR creation of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: ejbc. Performs an EJB compile and creates the interfaces  *-->
   <!--* JAR file.                                                         *-->
   <!--*===================================================================*-->
   <target name="ejbc" depends="init,delete-interfaces-jar,ejb-compile" description="Performs and EJB compile and creates the interfaces JAR file.">
      <echo message="EJB compile of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: jar-impls. Creates implementation JAR file.               *-->
   <!--*===================================================================*-->
   <target name="jar-impls" depends="init,delete-impls-jar,create-impls-jar" description="Creates the EJB implementations JAR file.">
      <echo message="Implementation JAR creation of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
   </target>

   <!--*===================================================================*-->
   <!--* Target: jar-resources. Creates resource JAR file.                 *-->
   <!--*===================================================================*-->
   <target name="jar-resources" depends="init,delete-resource-jar,create-resource-jar" description="Creates the EJB resources JAR file.">
      <echo message="Resource JAR creation of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: jar-stubs. Creates client stubs JAR file.                 *-->
   <!--*===================================================================*-->
   <target name="jar-stubs" depends="init,delete-stubs-jar,create-stubs-jar" description="Creates the EJB client stubs JAR file.">
      <echo message="Stubs JAR creation of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: jar-servlets. Creates FeatureScan Servlet JAR file.                            *-->
   <!--*===================================================================*-->
   <target name="jar-featureservlet" depends="init,delete-featureservlet-jar,create-featureservlet-jar" description="Creates the FeatureServlet deployment JAR file.">
      <echo message="FeatureServlet JAR creation of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: delete-build. Deletes the build specified by the root     *-->
   <!--* directory.                                                        *-->
   <!--*===================================================================*-->
   <target name="delete-build" depends="init" description="Deletes the specified build directory completely.">
      <delete dir="${api.root.dir}"/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: clean. Deletes all class and JAR files.                   *-->
   <!--*===================================================================*-->
   <target name="clean" depends="init" description="Deletes all of the class and JAR files for the specified build.">
      <echo message="Removing old output files..."/>
      <delete file="${api.bin.dir}/*.jar"/>
      <delete dir="${api.bin.dir}/com"/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: init. Initializes the build environment.                  *-->
   <!--*===================================================================*-->
   <target name="init" depends="init-tool-props,init-api-build-dir,init-api-props">
      <echo message="Starting build of ${api.type} for branch ${cvs.branch.tag} at ${DSTAMP}-${TSTAMP}..."/>
   </target>

   <!--*===================================================================*-->
   <!--* Target: init-tool-props. Initializes properties for all           *-->
   <!--* third-party tools.                                                *-->
   <!--*===================================================================*-->
   <target name="init-tool-props">
      <tstamp/>
      <echo message="Initializing API build environment..."/>

      <!--*================================================================*-->
      <!--* Allow property overrides.                                      *-->
      <!--*================================================================*-->
      <property file="${api.props.file}"/>

      <!--*================================================================*-->
      <!--* Initialize mandatory and optional CVS properties that have not *-->
      <!--* been set.                                                      *-->
      <!--*================================================================*-->
      <property name="cvs.module" value="server-build"/>
      <property name="cvs.branch.tag" value="HEAD"/>
      <property name="cvs.login.id" value="simpsomd"/>
      <property name="cvs.login.id" value="cvsreader"/>
      <property name="cvs.passwd.file" value="${user.home}/.cvspass"/>
      <property name="cvs.server.host" value="dsc101a.Genomics.com"/>
      <property name="cvs.rep.root" value="/cm/cvs"/>
      <property name="cvs.root" value=":pserver:${cvs.login.id}@${cvs.server.host}:${cvs.rep.root}"/>

      <!--*================================================================*-->
      <!--* Initialize mandatory and optional Java compiler properties     *-->
      <!--* that have not been set.                                        *-->
      <!--*================================================================*-->
      <property name="build.compiler" value="classic"/>
      <property name="java.debug" value="on"/>
      <property name="java.deprecation" value="off"/>
      <property name="java.optimize" value="on"/>


      <!--*================================================================*-->
      <!--* Initialize mandatory and optional WebLogic properties that     *-->
      <!--* have not been set.                                             *-->
      <!--*================================================================*-->
      <property name="wl.classpath"
         value="${wl.home}/lib/weblogic510sp8boot.jar:
            ${wl.home}/lib/weblogic510sp8.jar:
            ${wl.home}/classes:
            ${wl.home}/lib/weblogicaux.jar:
            ${wl.home}/lib/unpacked_jars/jndi.jar:
            ${wl.home}/lib/unpacked_jars/collections.zip"
      />
   </target>


   <!--*===================================================================*-->
   <!--* Target: init-api-build-dir. Initializes the build subdirectory    *-->
   <!--* property if it is not specified on the command line.              *-->
   <!--*===================================================================*-->
   <target name="init-api-build-dir" unless="api.build.dir">
      <property name="api.build.dir" value="${DSTAMP}_${TSTAMP}_${api.type}_${cvs.branch.tag}"/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: init-api-props. Initializes the API build environment.    *-->
   <!--*===================================================================*-->
   <target name="init-api-props">

      <!--*================================================================*-->
      <!--* Initialize APIary build environment properties.                *-->
      <!--*================================================================*-->
      <property name="api.home.dir" value="${user.home}/build"/>
      <property name="api.root.dir" value="${api.home.dir}/${api.build.dir}"/>
      <property name="api.src.dir" value="${api.root.dir}/src"/>
      <property name="api.lib.dir" value="${api.root.dir}/lib"/>
      <property name="api.bin.dir" value="${api.root.dir}/bin"/>
      <property name="api.meta.dir" value="${api.bin.dir}/META-INF"/>
      <property name="api.ids.version" value="3_1"/>
      <property name="api.contact.email" value="GRPRKVAPIARY@Genomics.com"/>

      <!--*================================================================*-->
      <!--* Property used to identify the Java source files to be compiled *-->
      <!--* in the build.                                                  *-->
      <!--*================================================================*-->
      <property name="api.src.files"
         value="com/Genomics/api/**/*,
            com/Genomics/jsp/**/*,
            com/Genomics/performance/**/*,
            com/Genomics/server/**/*,
            com/Genomics/shared/**/*,
            test/Genomics/server/server_monitor/*"
      />

      <!--*================================================================*-->
      <!--* Property used to identify the Java class files to be included  *-->
      <!--* in the interface and implementations JAR files.                *-->
      <!--*================================================================*-->
      <property name="api.class.files"
         value="com/Genomics/api/**/*.class,
            com/Genomics/jsp/**/*.class,
            com/Genomics/performance/**/*.class,
            com/Genomics/server/**/*.class,
            com/Genomics/shared/**/*.class,
            test/Genomics/server/server_monitor/*.class"
      />

      <!--*================================================================*-->
      <!--* Property used to identify the Java classpath used to build the *-->
      <!--* API source files.                                              *-->
      <!--*================================================================*-->
      <property name="api.classpath"
         value="${api.bin.dir}:
            ${api.lib.dir}/server/erights/classes.jar:
            ${api.lib.dir}/server/rdbms/jdbc/oracle/classes12.zip:
            ${api.lib.dir}/shared/xml/xercbin.jar:
            ${wl.classpath}"
      />

      <!--*================================================================*-->
      <!--* Check for the existence of JAR files built previously.         *-->
      <!--*================================================================*-->
      <available file="${api.bin.dir}/${api.type}_interfaces.jar" property="api.inter.jar.exists" value="true"/>
      <available file="${api.bin.dir}/${api.type}_impls.jar" property="api.impls.jar.exists" value="true"/>
      <available file="${api.bin.dir}/${api.type}_resource.jar" property="api.res.jar.exists" value="true"/>
      <available file="${api.bin.dir}/${api.type}_stubs.jar" property="api.stubs.jar.exists" value="true"/>

      <!--*================================================================*-->
      <!--* Check for the existence of the build and local deployment      *-->
      <!--* directories.                                                   *-->
      <!--*================================================================*-->
      <available file="${api.root.dir}" property="build.dir.exists" value="true"/>
      <available file="${wl.home}/Genomics/${api.type}" property="deploy.dir.exists" value="true"/>

      <echo message="Build environment has been initialized..."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: make-build-dir. Create the build directory.               *-->
   <!--*===================================================================*-->
   <target name="make-build-dir" unless="build.dir.exists" depends="init">
      <mkdir dir="${api.root.dir}"/>
   </target>


   <!--*===================================================================*-->
   <!--* CVS tasks.                                                        *-->
   <!--*===================================================================*-->

   <!--*===================================================================*-->
   <!--* Target: cvs-checkout. Checkout the CVS module for the specified   *-->
   <!--* branch from CVS.                                                  *-->
   <!--*===================================================================*-->
   <target name="cvs-checkout" depends="cvs-module-exists,cvs-passwd-file-exists" unless="build.dir.exists">
      <echo message="Checking out module ${cvs.module} branch ${cvs.branch.tag} from CVS..."/>

      <cvs cvsRoot="${cvs.root}"
           package="${cvs.module}"
           command="checkout -P -d ${api.build.dir}"
           dest="${api.home.dir}"
           tag="${cvs.branch.tag}"/>
      <replace file="${api.bin.dir}/resource/server/shared/DeployedBuild.properties"
         token="@@@@"
         value="${api.build.dir}"
      />
   </target>


   <!--*===================================================================*-->
   <!--* Target: cvs-module-exists. Determines if the CVS module property  *-->
   <!--* has been set.                                                     *-->
   <!--*===================================================================*-->
   <target name="cvs-module-exists" unless="cvs.module">
      <echo message="ERROR: The CVS module property (cvs.module) has not been set. Please set this"/>
      <echo message="property in the project build XML file."/>
      <fail message="Invalid CVS module name. Please see the error message above."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: cvs-passwd-file-exists. Checks for the existence of the   *-->
   <!--* CVS password file for the user.                                   *-->
   <!--*===================================================================*-->
   <target name="cvs-passwd-file-exists">
      <available file="${cvs.passwd.file}" property="cvs.isLoggedIn" value="true"/>
      <echo message="Checked for .cvspass file: ${cvs.passwd.file}   Exists: ${cvs.isLoggedIn}   OS: ${os.name}"/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: cvs-login. Log in to CVS.                                 *-->
   <!--*===================================================================*-->
   <target name="cvs-login" unless="cvs.isLoggedIn">
      <echo message="Logging in to CVS..."/>
      <cvs cvsRoot="${cvs.root}" command="login"/>
      <property name="cvs.isLoggedIn" value="true"/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: cvs-update. Update existing files from CVS.               *-->
   <!--*===================================================================*-->
   <target name="cvs-update" depends="init" if="build.dir.exists">
      <echo message="Updating module ${cvs.module} branch ${cvs.branch.tag} from CVS..."/>

      <cvs cvsRoot="${cvs.root}" command="update -P -d" dest="${api.root.dir}"/>
   </target>


   <!--*===================================================================*-->
   <!--* Java tasks.                                                       *-->
   <!--*===================================================================*-->

   <!--*===================================================================*-->
   <!--* Target: java-compile. Compiles the source code.                   *-->
   <!--*===================================================================*-->
   <target name="java-compile" depends="api-src-dir-exists,api-src-files-exists,api-classpath-exists,api-bin-dir-exists">
      <echo message="Compiling source files... ${api.root.dir}/JBuilderProjects/server/${api.jbuilder.project.file}"/>
      <exec dir="${api.root.dir}/JBuilderProjects/server" executable="${jbuilder.exe}" output="${api.bin.dir}/compile.log">
         <arg value="-build"/>
         <arg value="${api.root.dir}/JBuilderProjects/server/${api.jbuilder.project.file}"/>
      </exec>
   </target>

   <!--*===================================================================*-->
   <!--* Target: api-src-dir-exists. Determines if the API source          *-->
   <!--* directory property has been set.                                  *-->
   <!--*===================================================================*-->
   <target name="api-src-dir-exists" unless="api.src.dir">
      <echo message="ERROR: The API source directory property (api.src.dir) has not been set."/>
      <echo message="Please set this property in the project build XML file."/>
      <fail message="Invalid API source directory. Please see the error message above."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: api-bin-dir-exists. Determines if the API destination     *-->
   <!--* directory property has been set.                                  *-->
   <!--*===================================================================*-->
   <target name="api-bin-dir-exists" unless="api.bin.dir">
      <echo message="ERROR: The Java destination directory property (api.bin.dir) has not been set."/>
      <echo message="Please set this property in the project build XML file."/>
      <fail message="Invalid API destination directory. Please see the error message above."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: api-src-files-exists. Determines if the API source files  *-->
   <!--* property has been set.                                            *-->
   <!--*===================================================================*-->
   <target name="api-src-files-exists" unless="api.src.files">
      <echo message="ERROR: The API source files property (api.src.files) has not been set."/>
      <echo message="Please set this property in the project build XML file."/>
      <fail message="Invalid API source files property. Please see the error message above."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: api-classpath-exists. Determines if the API classpath     *-->
   <!--* property has been set.                                            *-->
   <!--*===================================================================*-->
   <target name="api-classpath-exists" unless="api.classpath">
      <echo message="ERROR: The API classpath property (api.classpath) has not been set. Please"/>
      <echo message="set this property in the project build XML file."/>
      <fail message="Invalid API classpath. Please see the error message above."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: rmic. Compiles RMI stubs and skeletons..                  *-->
   <!--*===================================================================*-->
   <target name="rmic" depends="api-src-dir-exists,api-src-files-exists,api-classpath-exists,api-bin-dir-exists">
      <java classname="weblogic.rmic" classpath="${api.classpath}" fork="yes">
         <jvmarg value="-DGenomics.genomebrowser.ServerComponentsProperties=resource.shared.ServerComponentsEJB"/>
         <arg value="-d"/>
         <arg value="${api.bin.dir}"/>
         <arg value="com.Genomics.server.impl.cache.CacheControlImpl"/>
      </java>
   </target>


   <!--*===================================================================*-->
   <!--* Interfaces JAR targets - includes EJB compilation.                *-->
   <!--*===================================================================*-->

   <!--*===================================================================*-->
   <!--* Target: ejb-compile. Generates and runs the RMI compiler on the   *-->
   <!--* EJB client-side stubs and server-side skeletons.                  *-->
   <!--*===================================================================*-->
   <target name="ejb-compile" depends="wl-home-exists,wl-compiler-exists,wl-classpath-exists">

      <!--*================================================================*-->
      <!--* Create the META-INF directory and copy the deployment          *-->
      <!--* descriptors to the directory.                                  *-->
      <!--*================================================================*-->
      <mkdir dir="${api.meta.dir}"/>

      <copy
         file="${api.bin.dir}/resource/server/weblogic/${api.type}/ejb-jar.xml"
         tofile="${api.meta.dir}/ejb-jar.xml"
         overwrite="yes"
      />

      <copy
         file="${api.bin.dir}/resource/server/weblogic/${api.type}/weblogic-ejb-jar.xml"
         tofile="${api.meta.dir}/weblogic-ejb-jar.xml"
         overwrite="yes"
      />

      <!--*================================================================*-->
      <!--* Create the EJB interfaces JAR file.                            *-->
      <!--*================================================================*-->
      <EjbJar descriptordir="${api.meta.dir}" srcdir="${api.bin.dir}" basejarname="${api.type}_interfaces">
         <weblogic destdir="${api.bin.dir}"
            compiler="${wl.compiler}"
            classpath="${api.classpath}"/>
         <include name="**/ejb-jar.xml"/>
         <exclude name="**/weblogic*.xml"/>
      </EjbJar>

      <property name="api.inter.jar.exists" value="true"/>

      <!--*================================================================*-->
      <!--* Delete the temporary copies of the EJB deployment descriptors. *-->
      <!--*================================================================*-->
      <delete dir="${api.meta.dir}"/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: wl-home-exists. Determines if the WebLogic home property  *-->
   <!--* has been set.                                                     *-->
   <!--*===================================================================*-->
   <target name="wl-home-exists" unless="wl.home">
      <echo message="ERROR: The WebLogic home property (wl.home) has not been set. Please set this"/>
      <echo message="property in the project build XML file."/>
      <fail message="Invalid WebLogic home location. Please see the error message above."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: wl-compiler-exists. Determines if the WebLogic compiler   *-->
   <!--* property has been set.                                            *-->
   <!--*===================================================================*-->
   <target name="wl-compiler-exists" unless="wl.compiler">
      <echo message="ERROR: The WebLogic compiler property (wl.compiler) has not been set. Please"/>
      <echo message="set this property in the project build XML file."/>
      <fail message="Invalid WebLogic compiler. Please see the error message above."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: wl-classpath-exists. Determines if the WebLogic classpath *-->
   <!--* property has been set.                                            *-->
   <!--*===================================================================*-->
   <target name="wl-classpath-exists" unless="wl.classpath">
      <echo message="ERROR: The WebLogic classpath property (wl.classpath) has not been set."/>
      <echo message="Please set this property in the project build XML file."/>
      <fail message="Invalid WebLogic classpath. Please see the error message above."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: delete-interfaces-jar. Delete the EJB interfaces JAR file *-->
   <!--* if it exists.                                                     *-->
   <!--*===================================================================*-->
   <target name="delete-interfaces-jar" if="api.inter.jar.exists">
      <delete file="${api.bin.dir}/${api.type}_interfaces.jar"/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: deploy-to-devel. Deploys the interfaces JAR to the local  *-->
   <!--* development server.                                               *-->
   <!--*===================================================================*-->
   <target name="deploy-to-devel">
      <copy file="${api.bin.dir}/${api.type}_interfaces.jar"
         tofile="${wl.home}/Genomics/${api.type}/${api.type}_interfaces.jar"
         overwrite="yes"
      />
   </target>


   <!--*===================================================================*-->
   <!--* Implementation JAR targets.                                       *-->
   <!--*===================================================================*-->

   <!--*===================================================================*-->
   <!--* Target: create-impls-jar. Create the EJB implementations JAR file.*-->
   <!--*===================================================================*-->
   <target name="create-impls-jar">
      <echo message="Creating EJB implementation JAR file..."/>
      <jar jarfile="${api.bin.dir}/${api.type}_impls.jar"
         basedir="${api.bin.dir}"
         whenempty="fail"
         includes="${api.class.files}"
      />

      <property name="api.impls.jar.exists" value="true"/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: delete-impls-jar. Delete the EJB implementation JAR file  *-->
   <!--* if it exists.                                                     *-->
   <!--*===================================================================*-->
   <target name="delete-impls-jar" if="api.impls.jar.exists">
      <delete file="${api.bin.dir}/${api.type}_impls.jar"/>
   </target>


   <!--*===================================================================*-->
   <!--* Resource JAR targets.                                             *-->
   <!--*===================================================================*-->

   <!--*===================================================================*-->
   <!--* Target: create-resource-jar. Create the EJB resource JAR file.    *-->
   <!--*===================================================================*-->
   <target name="create-resource-jar">
      <echo message="Creating EJB resource JAR file..."/>
      <jar jarfile="${api.bin.dir}/${api.type}_resource.jar"
         basedir="${api.bin.dir}"
         includes="resource/server/**,resource/shared/**"
         excludes="resource/server/weblogic/**"
         whenempty="fail"
      />

      <property name="api.res.jar.exists" value="true"/>
   </target>

   <!--*===================================================================*-->
   <!--* Target: delete-resource-jar. Delete the EJB resource JAR file if  *-->
   <!--* it exists.                                                        *-->
   <!--*===================================================================*-->
   <target name="delete-resource-jar" if="api.res.jar.exists">
      <delete file="${api.bin.dir}/${api.type}_resource.jar"/>
   </target>


   <!--*===================================================================*-->
   <!--* Stubs JAR targets.                                                *-->
   <!--*===================================================================*-->

   <!--*===================================================================*-->
   <!--* Target: create-stubs-jar. Create the EJB stubs JAR file that is   *-->
   <!--* distributed with the client code.                                 *-->
   <!--*===================================================================*-->
   <target name="create-stubs-jar">
      <echo message="Creating EJB stubs JAR file..."/>
      <property name="tmp.stub.dir" value="${api.bin.dir}/tmp_stub"/>

      <mkdir dir="${tmp.stub.dir}"/>
      <unjar src="${api.bin.dir}/${api.type}_interfaces.jar" dest="${tmp.stub.dir}"/>

      <jar jarfile="${api.bin.dir}/${api.type}_stubs.jar"
         basedir="${tmp.stub.dir}"
         includes="**/*Stub*"
         whenempty="fail"
      />

      <property name="api.stubs.jar.exists" value="true"/>

      <delete dir="${tmp.stub.dir}"/>
   </target>

   <!--*===================================================================*-->
   <!--* Target: delete-stubs-jar. Delete the EJB stubs JAR file if it     *-->
   <!--* exists.                                                           *-->
   <!--*===================================================================*-->
   <target name="delete-stubs-jar" if="api.stubs.jar.exists">
      <delete file="${api.bin.dir}/${api.type}_stubs.jar"/>
   </target>


   <!--*===================================================================*-->
   <!--* Servlet JAR targets.                                                  *-->
   <!--*===================================================================*-->

   <!--*===================================================================*-->
   <!--* Target: create-featureservlet-jar. Create the feature servlet JAR file.           *-->
   <!--*===================================================================*-->
   <target name="create-featureservlet-jar">
      <echo message="Creating FeatureServlet JAR file..."/>
      <jar jarfile="${api.bin.dir}/FeatureServlet.jar"
         basedir="${api.bin.dir}"
         includes="com/Genomics/servlet/feature_scan/**/*"
         whenempty="fail"
      />

      <property name="api.featureservlet.jar.exists" value="true"/>
   </target>

   <!--*===================================================================*-->
   <!--* Target: delete-featureservlet-jar. Delete the JAR file if    *-->
   <!--* it exists.                                                        *-->
   <!--*===================================================================*-->
   <target name="delete-featureservlet-jar" if="api.featureservlet.jar.exists">
      <delete file="${api.bin.dir}/FeatureServlet.jar"/>
   </target>

</project>

