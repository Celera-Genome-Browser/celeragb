<?xml version="1.0" encoding="US-ASCII"?>
<!--
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Copyright (c) 1999 - 2006 Applera Corporation.
 301 Merritt 7 
 P.O. Box 5435 
 Norwalk, CT 06856-5435 USA

 This is free software; you can redistribute it and/or modify it under the 
 terms of the GNU Lesser General Public License as published by the 
 Free Software Foundation; version 2.1 of the License.

 This software is distributed in the hope that it will be useful, but 
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE. 
 See the GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License 
 along with this software; if not, write to the Free Software Foundation, Inc.
 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
-->

<!--*================================================================================*-->
<!--* FILE:                                                                          *-->
<!--*    client_build.xml                                                               *-->
<!--* DESCRIPTION:                                                                   *-->
<!--*    XML build instructions file used by Ant to build the specified clients. The    *-->
<!--*    useful targets can be seen by executing the following on a command line:    *-->
<!--*                                                                                *-->
<!--*    ant -projecthelp -buildfile ./client_build.xml                                 *-->
<!--*                                                                                *-->
<!--* PROPERTIES:                                                                    *-->
<!--*    api.type                - Mandatory. The API type being built. Valid values *-->
<!--*                              are:                                              *-->
<!--*                                  gbapi - Genome Browser APIs                   *-->
<!--*                                  capi  - Genomics APIs                           *-->
<!--*                              The type is passed in on the command line.        *-->
<!--*    api.home.dir            - Mandatory. The home directory in which all builds *-->
<!--*                              are done.                                         *-->
<!--*    api.build.dir           - Mandatory. The build subdirectory.                *-->
<!--*    api.root.dir            - The fully-qualified root build directory. This    *-->
<!--*                              property is assumed to be concatenation of the    *-->
<!--*                              home and build directory properties.              *-->
<!--*    api.src.dir             - The directory containing the Java source files.   *-->
<!--*                              This property is assumed to be the concatenation  *-->
<!--*                              of the root directory property and \src.          *-->
<!--*    api.lib.dir             - The directory containing third-party JAR files.   *-->
<!--*                              This property is assumed to be the concatenation  *-->
<!--*                              of the root directory property and \lib.          *-->
<!--*    api.bin.dir             - The directory containing shell scripts, class     *-->
<!--*                              files, JAR files, and resource files. This        *-->
<!--*                              property is assumed to be the concatenation of    *-->
<!--*                              the root directory property and \bin.             *-->
<!--*    api.sql.dir             - The directory containing SQL files. This property *-->
<!--*                              is assumed to be the concatenation of the root    *-->
<!--*                              directory property and \sql.                      *-->
<!--*    api.meta.dir            - The directory containing the EJB deployment       *-->
<!--*                              descriptors. This property is assumed to be the   *-->
<!--*                              concatenation of the bin directory property and   *-->
<!--*                              \META-INF.                                        *-->
<!--*    api.src.files           - Manadatory. The source file directory and name    *-->
<!--*                              patterns to include in the build.                 *-->
<!--*    api.classes.dir         - directory where the class files are found         *-->
<!--*    api.class.files         - Manadatory. The class file directory and name     *-->
<!--*                              patterns to include in the build.                 *-->
<!--*    api.classpath           - Mandatory. The classpath used by the compiler to  *-->
<!--*                              resolve compilation dependencies.                 *-->
<!--*    api.props.file          - The properties file used to override properties   *-->
<!--*                              in the project build XML file. This property can  *-->
<!--*                              be passed in (see the client_build.cmd script).      *-->
<!--*    api.contact.email       - The client team email address.                       *-->
<!--*    api.ids.version         - The IDS schema version the build is targeting.    *-->
<!--*                                                                                *-->
<!--*                                                                                *-->
<!--*    api.inter.jar.exists    - The interfaces JAR file exists in the current or  *-->
<!--*                              specified build directory.                        *-->
<!--*    api.impls.jar.exists    - The implementation JAR file exists in the current *-->
<!--*                              or specified build directory.                     *-->
<!--*    api.jar.exists   - The client EJB interface JAR file exists in the   *-->
<!--*                              current or specified build directory.             *-->
<!--*    api.res.jar.exists      - The resource JAR file exists in the current or    *-->
<!--*                              specified build directory.                        *-->
<!--*    api.stubs.jar.exists    - The client stubs JAR file exists in the current   *-->
<!--*                              or specified build directory.                     *-->
<!--*    api.sql.jar.exists      - The Oracle SQL JAR file exists in the current or  *-->
<!--*                              specified build directory.                        *-->
<!--*    build.dir.exists        - The build directory exists.                       *-->
<!--*    deploy.dir.exists       - The local deployment directory exists.            *-->
<!--*                                                                                *-->
<!--*                                                                                *-->
<!--*    wl.home                 - The home directory location of WebLogic. This     *-->
<!--*                              can be overridden by specifying an environment    *-->
<!--*                              variable called WL_HOME which will be picked up   *-->
<!--*                              by the build script.                              *-->
<!--*    wl.compiler             - The compiler used by WebLogic to perform the RMI  *-->
<!--*                              compilation of the EJBs.                          *-->
<!--*    wl.classpath            - The classpath used by the WebLogic tools to       *-->
<!--*                              perform the EJB compilation.                      *-->
<!--*                                                                                *-->
<!--*                                                                                *-->
<!--*    build.compiler          - Optional. The flag indicating which compiler to   *-->
<!--*                              use. Valid values are:                            *-->
<!--*                                  classic - JDK 1.1/1.2 compiler.               *-->
<!--*                                  modern  - JDK 1.3 compiler.                   *-->
<!--*                                  jikes   - IBM Jikes compiler.                 *-->
<!--*    java.debug              - Optional. The flag turning compiler debug         *-->
<!--*                              information on or off. Defaults to on.            *-->
<!--*    java.deprecation        - Optional. The flag turning deprecation messages   *-->
<!--*                              on or off. Defaults to off.                       *-->
<!--*    java.optimize           - Optional. The flag turning compiler optimization  *-->
<!--*                              on or off. Defaults to on.                        *-->
<!--*                                                                                *-->
<!--*                                                                                *-->
<!--*    cvs.module              - The name of the CVS module to checkout or update. *-->
<!--*                              The module name must be specified in the project  *-->
<!--*                              build instructions XML file.                      *-->
<!--*    cvs.branch.tag          - The tag to use to identify the code branch to be  *-->
<!--*                              checked out of CVS. Defaults to HEAD. The tag can *-->
<!--*                              be specified in the project build instructions    *-->
<!--*                              XML file.                                         *-->
<!--*    cvs.login.id            - The user ID used to login to CVS. The login       *-->
<!--*                              ID can be specified in the project build          *-->
<!--*                              instructions XML file.                            *-->
<!--*    cvs.passwd.file         - The location of the CVS password file for the     *-->
<!--*                              user. Defaults to the user's home directory. The  *-->
<!--*                              password file location can be overridden in the   *-->
<!--*                              project build instructions XML file.              *-->
<!--*    cvs.server.host         - The CVS host server. The server host name can     *-->
<!--*                              be overridden in the project build instructions   *-->
<!--*                              XML file.                                         *-->
<!--*    cvs.rep.root            - The server host directory location that is the    *-->
<!--*                              CVS repository root directory. The repository     *-->
<!--*                              root can be overridden in the project build       *-->
<!--*                              instructions XML file.                            *-->
<!--*    cvs.root                - The CVS root. The CVS root can be overridden in   *-->
<!--*                              the project build instructions XML file.          *-->
<!--*    product.version         - Contains just the version for replacement in the  *-->
<!--*                              property file                                     *-->
<!--*================================================================================*-->

<project name="client-build" default="build-all" basedir=".">

   <!--*===================================================================*-->
   <!--* Target: build-all. Performs a complete build of the specified api.      *-->
   <!--*===================================================================*-->
   <target name="build-all" depends="init,make-build-dir,code-checkout,replace-tokens,compile,jar-all" description="Default. Performs a complete build.">
      <echo message="Full build of HEAD_${api.type} for branch ${cvs.branch.tag} is complete..."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: code-checkout. Performs a CVS code checkout.              *-->
   <!--*===================================================================*-->
   <target name="code-checkout" depends="init,make-build-dir,cvs-checkout" description="Checks out the specified CVS module.">
      <echo message="Code checkout of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: code-update. Performs a CVS code update.                  *-->
   <!--*===================================================================*-->
   <target name="code-update" depends="init,make-build-dir,cvs-update" description="Updates an existing code repository.">
      <echo message="Code checkout of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: compile. Performs a code build.                           *-->
   <!--*===================================================================*-->
   <target name="compile" depends="init,java-compile" description="Compiles all source files in the build directory. If none exists, the specified module will be checked out.">
      <echo message="Code compile of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: devel-build. Performs an EJB compile and deploys to the   *-->
   <!--* the developers local server.                                      *-->
   <!--*===================================================================*-->
   <target name="devel-build" depends="init,jar-resources" description="Performs an EJB compile and deploys to the interfaces JAR to the local WebLogic development server.">
      <echo message="Interfaces JAR for ${api.type} deployed to ${wl.home}/Genomics/${api.type}/${api.type}_interfaces.jar"/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: jar-all. Creates all JAR files.                           *-->
   <!--*===================================================================*-->
   <target name="jar-all" depends="init,jar-client,jar-resources" description="Creates all of the necessary deployment JAR files.">
      <echo message="JAR creation of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: jar-api. Creates client interface JAR file.            *-->
   <!--*===================================================================*-->
   <target name="jar-client" depends="init,delete-client-jar,create-client-jar" description="Creates the client EJB interface JAR file.">
      <echo message="Client JAR creation of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: jar-resources. Creates resource JAR file.            *-->
   <!--*===================================================================*-->
   <target name="jar-resources" depends="init,delete-resource-jar,create-resource-jar" description="Creates the resource JAR file.">
      <echo message="Resource JAR creation of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: delete-build. Deletes the build specified by the root     *-->
   <!--* directory.                                                        *-->
   <!--*===================================================================*-->
   <target name="delete-build" depends="init" description="Deletes the specified build directory completely.">
      <delete dir="${api.root.dir}"/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: clean. Deletes all class and JAR files.                   *-->
   <!--*===================================================================*-->
   <target name="clean" depends="init" description="Deletes all of the class and JAR files for the specified build.">
      <echo message="Removing old output files..."/>
      <delete file="${api.bin.dir}/*.jar"/>
      <delete dir="${api.bin.dir}/com"/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: init. Initializes the build environment.                  *-->
   <!--*===================================================================*-->
   <target name="init" depends="init-tool-props,init-client-build-dir,init-client-props">
      <echo message="Starting build of ${api.type} for branch ${cvs.branch.tag} at ${DSTAMP}-${TSTAMP}..."/>
   </target>

   <!--*===================================================================*-->
   <!--* Target: init-tool-props. Initializes properties for all           *-->
   <!--* third-party tools.                                                *-->
   <!--*===================================================================*-->
   <target name="init-tool-props">
      <tstamp/>
      <echo message="Initializing client build environment..."/>

      <!--*================================================================*-->
      <!--* Allow property overrides.                                      *-->
      <!--*================================================================*-->
      <property file="${api.props.file}"/>

      <!--*================================================================*-->
      <!--* Initialize mandatory and optional CVS properties that have not *-->
      <!--* been set.                                                      *-->
      <!--*================================================================*-->
      <property name="cvs.module" value="client-build-ant"/>
      <property name="cvs.branch.tag" value="HEAD"/>
      <property name="cvs.login.id" value="simpsomd"/>
      <property name="cvs.login.id" value="cvsreader"/>
      <property name="cvs.passwd.file" value="${user.home}/.cvspass"/>
      <property name="cvs.server.host" value="dsc101a.Genomics.com"/>
      <property name="cvs.rep.root" value="/cm/cvs"/>
      <property name="cvs.root" value=":pserver:${cvs.login.id}@${cvs.server.host}:${cvs.rep.root}"/>

      <!--*================================================================*-->
      <!--* Initialize mandatory and optional Java compiler properties     *-->
      <!--* that have not been set.                                        *-->
      <!--*================================================================*-->
      <property name="build.compiler" value="classic"/>
      <property name="java.debug" value="on"/>
      <property name="java.deprecation" value="off"/>
      <property name="java.optimize" value="on"/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: init-client-build-dir. Initializes the build subdirectory    *-->
   <!--* property if it is not specified on the command line.              *-->
   <!--*===================================================================*-->
   <target name="init-client-build-dir" unless="api.build.dir">
      <property name="api.build.dir" value="${DSTAMP}_${TSTAMP}_${api.type}_${cvs.branch.tag}"/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: init-client-props. Initializes the client build environment.    *-->
   <!--*===================================================================*-->
   <target name="init-client-props">

      <!--*================================================================*-->
      <!--* Initialize clientary build environment properties.                *-->
      <!--*================================================================*-->
      <property name="api.home.dir" value="${user.home}/build"/>
      <property name="api.root.dir" value="${api.home.dir}/${api.build.dir}"/>
      <property name="api.src.dir" value="${api.root.dir}/src"/>
      <property name="api.lib.dir" value="${api.root.dir}/lib"/>
      <property name="api.bin.dir" value="${api.root.dir}/bin"/>
      <property name="api.sql.dir" value="${api.root.dir}/sql"/>
      <property name="api.meta.dir" value="${api.bin.dir}/META-INF"/>
      <property name="api.ids.version" value="3_1"/>
      <property name="api.contact.email" value="GRPRKVAPIARY@Genomics.com"/>
      <property name="api.classes.dir" value="${api.root.dir}/classes"/>

      <!--*================================================================*-->
      <!--* Property used to identify the Java source files to be compiled *-->
      <!--* in the build.                                                  *-->
      <!--*================================================================*-->
      <property name="api.src.files"
         value="com/Genomics/client/**/*,
            com/Genomics/shared/**/*,
            com/Genomics/api/**/*"
      />

      <!--*================================================================*-->
      <!--* Property used to identify the Java class files to be included  *-->
      <!--* in the interface and implementations JAR files.                *-->
      <!--*================================================================*-->
      <property name="api.class.files"
         value="com/Genomics/client/**/*.class,
            com/Genomics/shared/**/*.class,
            com/Genomics/api/**/*.class,
            com/Genomics/vizard/**/*.class"
      />

      <!--*================================================================*-->
      <!--* Property used to identify the Java classpath used to build the *-->
      <!--* client source files.                                              *-->
      <!--*================================================================*-->
      <property name="api.classpath"
         value="${api.bin.dir}:
            ${api.lib.dir}/shared/xml/aelfred.jar:
            ${api.lib.dir}/shared/xml/sax.jar:
            ${api.lib.dir}/shared/xml/xml.jar:
            ${wl.classpath}"
      />

      <!--*================================================================*-->
      <!--* Check for the existence of JAR files built previously.         *-->
      <!--*================================================================*-->
      <available file="${api.bin.dir}/${api.type}_api.jar" property="api.jar.exists" value="true"/>

      <!--*================================================================*-->
      <!--* Check for the existence of the build and local deployment      *-->
      <!--* directories.                                                   *-->
      <!--*================================================================*-->
      <available file="${api.root.dir}" property="build.dir.exists" value="true"/>
      <available file="${wl.home}/Genomics/${api.type}" property="deploy.dir.exists" value="true"/>

      <echo message="Build environment has been initialized..."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: make-build-dir. Create the build directory.               *-->
   <!--*===================================================================*-->
   <target name="make-build-dir" unless="build.dir.exists" depends="init">
      <mkdir dir="${api.root.dir}"/>
   </target>


   <!--*===================================================================*-->
   <!--* CVS tasks.                                                        *-->
   <!--*===================================================================*-->

   <!--*===================================================================*-->
   <!--* Target: cvs-checkout. Checkout the CVS module for the specified   *-->
   <!--* branch from CVS.                                                  *-->
   <!--*===================================================================*-->
   <target name="cvs-checkout" depends="cvs-module-exists,cvs-passwd-file-exists" unless="build.dir.exists">
      <echo message="Checking out module ${cvs.module} branch ${cvs.branch.tag} from CVS..."/>

      <cvs cvsRoot="${cvs.root}"
           package="${cvs.module}"
           command="checkout -P -d ${api.build.dir}"
           dest="${api.home.dir}"
           tag="${cvs.branch.tag}"/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: cvs-module-exists. Determines if the CVS module property  *-->
   <!--* has been set.                                                     *-->
   <!--*===================================================================*-->
   <target name="cvs-module-exists" unless="cvs.module">
      <echo message="ERROR: The CVS module property (cvs.module) has not been set. Please set this"/>
      <echo message="property in the project build XML file."/>
      <fail message="Invalid CVS module name. Please see the error message above."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: cvs-passwd-file-exists. Checks for the existence of the   *-->
   <!--* CVS password file for the user.                                   *-->
   <!--*===================================================================*-->
   <target name="cvs-passwd-file-exists">
      <available file="${cvs.passwd.file}" property="cvs.isLoggedIn" value="true"/>
      <echo message="Checked for .cvspass file: ${cvs.passwd.file}   Exists: ${cvs.isLoggedIn}   OS: ${os.name}"/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: cvs-login. Log in to CVS.                                 *-->
   <!--*===================================================================*-->
   <target name="cvs-login" unless="cvs.isLoggedIn">
      <echo message="Logging in to CVS..."/>
      <cvs cvsRoot="${cvs.root}" command="login"/>
      <property name="cvs.isLoggedIn" value="true"/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: cvs-update. Update existing files from CVS.               *-->
   <!--*===================================================================*-->
   <target name="cvs-update" depends="init" if="build.dir.exists">
      <echo message="Updating module ${cvs.module} branch ${cvs.branch.tag} from CVS..."/>

      <cvs cvsRoot="${cvs.root}" command="update -P -d" dest="${api.root.dir}"/>
   </target>


   <!--*===================================================================*-->
   <!--* Java tasks.                                                       *-->
   <!--*===================================================================*-->

   <!--*===================================================================*-->
   <!--* Target: java-compile. Compiles the source code.                   *-->
   <!--*===================================================================*-->
   <target name="java-compile" depends="client-src-dir-exists,client-src-files-exists,client-classpath-exists,client-bin-dir-exists">
      <echo message="Compiling source files... ${api.root.dir}/JBuilderProjects/client/GBCLIENT_HEAD.jpx"/>
      <exec dir="${api.root.dir}/JBuilderProjects/client" executable="jbuilder.exe" output="${api.bin.dir}/compile.log">
         <arg value="-build"/>
         <arg value="${api.root.dir}/JBuilderProjects/client/GBCLIENT_HEAD.jpx"/>
      </exec>
   </target>

   <!--*===================================================================*-->
   <!--* Target: client-src-dir-exists. Determines if the client source          *-->
   <!--* directory property has been set.                                  *-->
   <!--*===================================================================*-->
   <target name="client-src-dir-exists" unless="api.src.dir">
      <echo message="ERROR: The client source directory property (api.src.dir) has not been set."/>
      <echo message="Please set this property in the project build XML file."/>
      <fail message="Invalid client source directory. Please see the error message above."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: client-bin-dir-exists. Determines if the client destination     *-->
   <!--* directory property has been set.                                  *-->
   <!--*===================================================================*-->
   <target name="client-bin-dir-exists" unless="api.bin.dir">
      <echo message="ERROR: The Java destination directory property (api.bin.dir) has not been set."/>
      <echo message="Please set this property in the project build XML file."/>
      <fail message="Invalid client destination directory. Please see the error message above."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: client-src-files-exists. Determines if the client source files  *-->
   <!--* property has been set.                                            *-->
   <!--*===================================================================*-->
   <target name="client-src-files-exists" unless="api.src.files">
      <echo message="ERROR: The client source files property (api.src.files) has not been set."/>
      <echo message="Please set this property in the project build XML file."/>
      <fail message="Invalid client source files property. Please see the error message above."/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: client-classpath-exists. Determines if the client classpath     *-->
   <!--* property has been set.                                            *-->
   <!--*===================================================================*-->
   <target name="client-classpath-exists" unless="api.classpath">
      <echo message="ERROR: The client classpath property (api.classpath) has not been set. Please"/>
      <echo message="set this property in the project build XML file."/>
      <fail message="Invalid client classpath. Please see the error message above."/>
   </target>


   <!--*===================================================================*-->
   <!--* Implementation JAR targets.                                       *-->
   <!--*===================================================================*-->

   <!--*===================================================================*-->
   <!--* Target: create-impls-jar. Create the EJB implementations JAR file.*-->
   <!--*===================================================================*-->
   <target name="create-impls-jar">
      <echo message="Creating EJB implementation JAR file..."/>
      <jar jarfile="${api.bin.dir}/${api.type}_impls.jar"
         basedir="${api.bin.dir}"
         whenempty="fail"
         includes="${api.class.files}"
      />

      <property name="api.impls.jar.exists" value="true"/>
   </target>


   <!--*===================================================================*-->
   <!--* Resource JAR targets.                                             *-->
   <!--*===================================================================*-->

   <!--*===================================================================*-->
   <!--* Target: create-resource-jar. Create the EJB resource JAR file.    *-->
   <!--* excludes="..."*-->
   <!--*===================================================================*-->
   <target name="create-resource-jar">
      <echo message="Creating EJB resource JAR file..."/>

      <property name="api.res.jar.exists" value="true"/>
   </target>

   <!--*===================================================================*-->
   <!--* Target: delete-resource-jar. Delete the EJB resource JAR file if  *-->
   <!--* it exists.                                                        *-->
   <!--*===================================================================*-->
   <target name="delete-resource-jar" if="api.res.jar.exists">
      <delete file="${api.bin.dir}/${api.type}_shared.jar"/>
      <delete file="${api.bin.dir}/${api.type}_internal.jar"/>
   </target>


   <!--*===================================================================*-->
   <!--* Client JAR targets - Used by the Genomics clients only.                *-->
   <!--*===================================================================*-->

   <!--*===================================================================*-->
   <!--* Target: create-client-jar. Create the client EJB interface JAR    *-->
   <!--* file.                                                             *-->
   <!--*===================================================================*-->
   <target name="create-client-jar">
      <echo message="Creating client JAR file..."/>
      <jar jarfile="${api.bin.dir}/Genome_Browser_Client.jar"
         basedir="${api.bin.dir}"
         whenempty="fail"
         includes="${api.class.files},resource/client/**"
         excludes="resource/client/XMLdata/**,
                   resource/client/GenomicsInternalCertificate,
                   resource/client/PublicCertificate,
                   resource/client/images/dnaAnimation*.gif,
                   resource/client/images/eap_logo.jpg,
                   resource/client/images/chrom_logo.jpg,
                   resource/client/images/poly_logo.jpg,
                   resource/client/images/gd_logo1.jpg,
                   resource/client/images/genome_logo_blue.jpg,
                   resource/client/images/genome_browser.jpg,
                   resource/client/install/**"
      />
      <jar jarfile="${api.bin.dir}/Genome_Browser_Client.jar"
         update="yes"
         basedir="${api.classes.dir}"
         whenempty="fail"
         includes="${api.class.files}"
           excludes="com/Genomics/client/launcher/**,
                     com/Genomics/client/tools/**"
      />



      <jar jarfile="${api.bin.dir}/tools.jar"
         basedir="${api.bin.dir}"
         whenempty="fail"
         includes="resource/client/images/gb_splash_logo_sm.jpg"
      />
      <jar jarfile="${api.bin.dir}/tools.jar"
         update="yes"
         basedir="${api.classes.dir}"
         whenempty="fail"
         includes="com/Genomics/client/tools/*"
      />



      <jar jarfile="${api.bin.dir}/gblauncher.jar"
         basedir="${api.bin.dir}"
         whenempty="fail"
         includes="resource/client/images/gb_splash_logo_install.jpg"
      />
      <jar jarfile="${api.bin.dir}/gblauncher.jar"
         update="yes"
         basedir="${api.classes.dir}"
         whenempty="fail"
         includes="com/Genomics/client/tools/**,com/Genomics/client/launcher/**"
      />



      <jar jarfile="${api.bin.dir}/${api.type}_shared.jar"
         basedir="${api.bin.dir}"
         includes="resource/shared/**,resource/client/PublicCertificate,resource/client/XMLdata/dtd/*"
         whenempty="fail"
      />

      <mkdir dir="${api.bin.dir}/internal_jar/resource/client"/>
      <copy file="${api.bin.dir}/resource/client/GenomicsInternalCertificate" todir="${api.bin.dir}/internal_jar/resource/client"/>
      <copy file="${api.bin.dir}/resource/client/Internal/Default_View.properties" todir="${api.bin.dir}/internal_jar/resource/client"/>

      <jar jarfile="${api.bin.dir}/${api.type}_internal.jar"
         basedir="${api.bin.dir}/internal_jar"
         includes="resource/client/*"
         whenempty="fail"
      />

      <mkdir dir="${api.bin.dir}/install_jar"/>
      <copy file="${api.bin.dir}/resource/client/install/GenomeBrowser.exe" todir="${api.bin.dir}/install_jar"/>
      <copy file="${api.bin.dir}/resource/client/install/shortcut.exe" todir="${api.bin.dir}/install_jar"/>
      <copy file="${api.bin.dir}/resource/client/images/GenomeBrowser.ico" todir="${api.bin.dir}/install_jar"/>
      <copy file="${api.bin.dir}/resource/client/install/GenomeBrowser.cfg" todir="${api.bin.dir}/install_jar"/>
      <copy file="${api.bin.dir}/resource/client/install/Genome Browser40.lnk" todir="${api.bin.dir}/install_jar"/>
      <copy file="${api.bin.dir}/tools.jar" todir="${api.bin.dir}/install_jar"/>

      <jar jarfile="${api.bin.dir}/install.jar"
         basedir="${api.bin.dir}/install_jar"
         includes="*"
         whenempty="fail"
      />
      <!--deltree dir="${api.bin.dir}/install_jar"/-->

      <exec dir="${api.bin.dir}" executable="${jarsigner.exe}" output="${api.bin.dir}/gblauncher.log">
         <arg line="-keystore"/>
         <arg path="${api.bin.dir}/resource/client/install/craKeystore"/>
         <arg line="-storepass"/>
         <arg value="appserver"/>
         <arg path="${api.bin.dir}/gblauncher.jar"/>
         <arg line="delivery"/>
      </exec>

      <exec dir="${api.bin.dir}" executable="${jarsigner.exe}" output="${api.bin.dir}/gblauncher.log">
         <arg line="-keystore"/>
         <arg path="${api.bin.dir}/resource/client/install/craKeystore"/>
         <arg line="-storepass"/>
         <arg value="appserver"/>
         <arg path="${api.bin.dir}/install.jar"/>
         <arg line="delivery"/>
      </exec>

      <property name="api.jar.exists" value="true"/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: delete-client-jar. Delete the EJB client JAR file if it   *-->
   <!--* exists.                                                           *-->
   <!--*===================================================================*-->
   <target name="delete-client-jar" if="api.jar.exists">
      <delete file="${api.bin.dir}/${api.type}_api.jar"/>
   </target>


   <!--*===================================================================*-->
   <!--* Target: compile. Performs a code build.                           *-->
   <!--*===================================================================*-->
   <target name="replace-tokens" depends="init,replace-client-aboutbox-datetime,replace-client-version" description="replaces version, date">
      <echo message="replacement of tokens complete..."/>
   </target>


   <target name="replace-client-aboutbox-datetime">
         <property name="datetime.stamp" value="${DSTAMP} ${TSTAMP}"/>
         <replace file="${api.src.dir}/com/Genomics/client/gui/framework/exception_handlers/UserNotificationHandler.java"
         token="@@date@@"
         value="${datetime.stamp}"
         />
         <replace file="${api.src.dir}/com/Genomics/client/gui/application/genome_browser/AboutBox.java"
         token="@@date@@"
         value="${datetime.stamp}"
         />
   </target>

   <target name="replace-client-version">
         <replace file="${api.src.dir}/com/Genomics/client/gui/application/genome_browser/GenomeBrowser.java"
         token="@@version@@"
         value="${product.version}"
         />
   </target>


</project>

