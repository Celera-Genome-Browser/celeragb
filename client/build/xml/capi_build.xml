<?xml version="1.0" encoding="US-ASCII"?>
<!--
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Copyright (c) 1999 - 2006 Applera Corporation.
 301 Merritt 7 
 P.O. Box 5435 
 Norwalk, CT 06856-5435 USA

 This is free software; you can redistribute it and/or modify it under the 
 terms of the GNU Lesser General Public License as published by the 
 Free Software Foundation; version 2.1 of the License.

 This software is distributed in the hope that it will be useful, but 
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE. 
 See the GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License 
 along with this software; if not, write to the Free Software Foundation, Inc.
 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
-->

<!--*================================================================================*-->
<!--* FILE:                                                                          *-->
<!--*    capi_build.xml                                                             *-->
<!--* DESCRIPTION:                                                                   *-->
<!--*    XML build instructions file used by Ant to build the Genome Browser APIs.   *-->
<!--*    The useful targets can be seen by executing the following on a command      *-->
<!--*    line:                                                                       *-->
<!--*                                                                                *-->
<!--*    ant -projecthelp -buildfile ./capi_build.xml                               *-->
<!--*                                                                                *-->
<!--* PROPERTIES:                                                                    *-->
<!--*    api.home.dir            - Mandatory. The home directory in which all builds *-->
<!--*                              are done.                                         *-->
<!--*    api.build.dir           - Mandatory. The build subdirectory.                *-->
<!--*    api.root.dir            - The fully-qualified root build directory. This    *-->
<!--*                              property is assumed to be concatenation of the    *-->
<!--*                              home and build directory properties.              *-->
<!--*    api.src.dir             - The directory containing the Java source files.   *-->
<!--*                              This property is assumed to be the concatenation  *-->
<!--*                              of the root directory property and \src.          *-->
<!--*    api.lib.dir             - The directory containing third-party JAR files.   *-->
<!--*                              This property is assumed to be the concatenation  *-->
<!--*                              of the root directory property and \lib.          *-->
<!--*    api.bin.dir             - The directory containing shell scripts, class     *-->
<!--*                              files, JAR files, and resource files. This        *-->
<!--*                              property is assumed to be the concatenation of    *-->
<!--*                              the root directory property and \bin.             *-->
<!--*    api.sql.dir             - The directory containing SQL files. This property *-->
<!--*                              is assumed to be the concatenation of the root    *-->
<!--*                              directory property and \sql.                      *-->
<!--*    api.meta.dir            - The directory containing the EJB deployment       *-->
<!--*                              descriptors. This property is assumed to be the   *-->
<!--*                              concatenation of the bin directory property and   *-->
<!--*                              \META-INF.                                        *-->
<!--*    api.src.files           - Manadatory. The source file directory and name    *-->
<!--*                              patterns to include in the build.                 *-->
<!--*    api.class.files         - Manadatory. The class file directory and name     *-->
<!--*                              patterns to include in the build.                 *-->
<!--*    api.classpath           - Mandatory. The classpath used by the compiler to  *-->
<!--*                              resolve compilation dependencies.                 *-->
<!--*    api.props.file          - The properties file used to override properties   *-->
<!--*                              in the project build XML file. This property can  *-->
<!--*                              be passed in (see the api_build.cmd script).      *-->
<!--*    api.ids.version         - The IDS schema version the build is targeting.    *-->
<!--*    api.build.compiler      - The compiler that will be used in all bcj and     *-->
<!--*                              ejb tasks.                                        *-->
<!--*                                                                                *-->
<!--*                                                                                *-->
<!--*    api.inter.jar.exists    - The interfaces JAR file exists in the current or  *-->
<!--*                              specified build directory.                        *-->
<!--*    api.impls.jar.exists    - The implementation JAR file exists in the current *-->
<!--*                              or specified build directory.                     *-->
<!--*    api.client.jar.exists   - The client EJB interface JAR file exists in the   *-->
<!--*                              current or specified build directory.             *-->
<!--*    api.res.jar.exists      - The resource JAR file exists in the current or    *-->
<!--*                              specified build directory.                        *-->
<!--*    api.sql.jar.exists      - The Oracle SQL JAR file exists in the current or  *-->
<!--*                              specified build directory.                        *-->
<!--*    build.dir.exists        - The build directory exists.                       *-->
<!--*    deploy.dir.exists       - The local deployment directory exists.            *-->
<!--*                                                                                *-->
<!--*                                                                                *-->
<!--*    wl.home                 - The home directory location of WebLogic. This     *-->
<!--*                              can be overridden by specifying an environment    *-->
<!--*                              variable called WL_HOME which will be picked up   *-->
<!--*                              by the build script.                              *-->
<!--*    wl.classpath            - The classpath used by the WebLogic tools to       *-->
<!--*                              perform the EJB compilation.                      *-->
<!--*                                                                                *-->
<!--*                                                                                *-->
<!--*    build.compiler          - Optional. The flag indicating which compiler to   *-->
<!--*                              use. Valid values are:                            *-->
<!--*                                  classic - JDK 1.1/1.2 compiler.               *-->
<!--*                                  modern  - JDK 1.3 compiler.                   *-->
<!--*                                  jikes   - IBM Jikes compiler.                 *-->
<!--*    java.debug              - Optional. The flag turning compiler debug         *-->
<!--*                              information on or off. Defaults to on.            *-->
<!--*    java.deprecation        - Optional. The flag turning deprecation messages   *-->
<!--*                              on or off. Defaults to off.                       *-->
<!--*    java.optimize           - Optional. The flag turning compiler optimization  *-->
<!--*                              on or off. Defaults to on.                        *-->
<!--*    java.nowarn             - Optional. The flag turning compiler warnings off. *-->
<!--*                              Defaults to on.                                   *-->
<!--*    java.quiet              - Optional. The flag turning compiler messages off. *-->
<!--*                              Defaults to on.                                   *-->
<!--*    java.depend             - Optional. The flag turning dependency checking on *-->
<!--*                              or off. Defaults to off.                          *-->
<!--*================================================================================*-->

<project name="api-build" default="build-all" basedir=".">

  <!--*====================================================================*-->
  <!--* Primary targets.                                                   *-->
  <!--*====================================================================*-->

  <!--*====================================================================*-->
  <!--* Taskdef: EjbJar. Declare the EJB compiler task from the Ant        *-->
  <!--* optional task JAR file.                                            *-->
  <!--*====================================================================*-->
  <taskdef name="EjbJar" classname="org.apache.tools.ant.taskdefs.optional.ejb.EjbJar"/>

  <!--*====================================================================*-->
  <!--* Target: build-all. Performs a complete build of the specified API.       *-->
  <!--*====================================================================*-->
  <target name="build-all" depends="init,compile,jar-all" description="Default. Performs a complete build.">
    <echo message="Full build of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
  </target>


  <!--*====================================================================*-->
  <!--* Target: compile. Compiles source files.                            *-->
  <!--*====================================================================*-->
  <target name="compile" depends="init,java-compile" description="Compiles all source files in the build directory.">
    <echo message="Compile of code ${api.type} for branch ${cvs.branch.tag} is complete..."/>
  </target>


  <!--*====================================================================*-->
  <!--* Target: devel-build. Performs an EJB compile and deploys to the    *-->
  <!--* the developers local server.                                       *-->
  <!--*====================================================================*-->
  <target name="devel-build" depends="init,jar-interfaces,deploy-to-devel,jar-resources" description="Performs an EJB compile and deploys to the interfaces JAR to the local WebLogic development server.">
    <echo message="Interfaces JAR for ${api.type} was deployed to ${wl.home}/genomics/${api.type}/${api.type}_interfaces.jar"/>
  </target>


  <!--*====================================================================*-->
  <!--* Target: jar-all. Creates all JAR files.                            *-->
  <!--*====================================================================*-->
  <target name="jar-all" depends="init,rmi-compile,jar-interfaces,jar-impls,jar-resources,jar-sql" description="Creates all of the necessary deployment JAR files.">
    <echo message="JAR creation of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
  </target>


  <!--*====================================================================*-->
  <!--* Target: jar-interfaces. Performs an EJB compile and creates the    *-->
  <!--* interfaces JAR file.                                               *-->
  <!--*====================================================================*-->
  <target name="jar-interfaces" depends="init,create-interfaces-jar" description="Compiles the EJB interfaces, skeletons, and stubs, and creates the interfaces deployment JAR file.">
    <echo message="Interface JAR creation of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
  </target>


  <!--*====================================================================*-->
  <!--* Target: jar-impls. Creates implementation JAR file.                *-->
  <!--*====================================================================*-->
  <target name="jar-impls" depends="init,create-impls-jar" description="Creates the EJB implementations JAR file.">
    <echo message="Implementation JAR creation of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: jar-resources. Creates resource JAR file.                 *-->
  <!--*===================================================================*-->
  <target name="jar-resources" depends="init,create-resource-jar" description="Creates the EJB resources JAR file.">
    <echo message="Resource JAR creation of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
  </target>

  <!--*===================================================================*-->
  <!--* Target: jar-sql. Creates SQL JAR file.                            *-->
  <!--*===================================================================*-->
  <target name="jar-sql" depends="init,create-sql-jar" description="Creates the SQL deployment JAR file.">
    <echo message="SQL JAR creation of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
  </target>


  <!--*====================================================================*-->
  <!--* Target: rmi-compile. Compiles all RMI classes, skeletons, and      *-->
  <!--* stubs.                                                             *-->
  <!--*====================================================================*-->
  <target name="rmi-compile" depends="init,rmic" description="Compiles all RMI classes, skeletons, and stubs.">
    <echo message="RMI compile of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: clean. Deletes all class and JAR files.                   *-->
  <!--*===================================================================*-->
  <target name="clean" depends="init" description="Deletes all of the class and JAR files for the specified build.">
    <echo message="Removing old output files..."/>

    <delete file="${api.bin.dir}/*.jar"/>
    <delete dir="${api.bin.dir}/com"/>
    <delete dir="${api.bin.dir}/test"/>
  </target>


  <!--*====================================================================*-->
  <!--* Initialization targets.                                            *-->
  <!--*====================================================================*-->

  <!--*====================================================================*-->
  <!--* Target: init. Initializes the build environment.                   *-->
  <!--*====================================================================*-->
  <target name="init" depends="init-tool-props,init-api-props">
    <echo message="Starting build of ${api.type} for branch ${cvs.branch.tag} at ${DSTAMP}-${TSTAMP}..."/>
  </target>


  <!--*====================================================================*-->
  <!--* Target: init-tool-props. Initializes properties for all            *-->
  <!--* third-party tools.                                                 *-->
  <!--*====================================================================*-->
  <target name="init-tool-props">
    <tstamp/>
    <echo message="Initializing API build environment..."/>

    <!--*==================================================================*-->
    <!--* Allow property overrides.                                        *-->
    <!--*==================================================================*-->
    <property file="${api.props.file}"/>

    <!--*==================================================================*-->
    <!--* Initialize mandatory and optional Java compiler properties that  *-->
    <!--* have not been set.                                               *-->
    <!--*==================================================================*-->
    <property name="build.compiler" value="modern"/>
    <property name="java.debug" value="on"/>
    <property name="java.deprecation" value="off"/>
    <property name="java.optimize" value="on"/>
    <property name="java.nowarn" value="off"/>
    <property name="java.quiet" value="off"/>
    <property name="java.depend" value="off"/>

    <!--*==================================================================*-->
    <!--* Initialize mandatory and optional WebLogic properties that have  *-->
    <!--* not been set.                                                    *-->
    <!--*==================================================================*-->
    <property name="wl.classpath"
      value="${wl.home}/lib/weblogic510sp8boot.jar:
      ${wl.home}/lib/weblogic510sp8.jar:
      ${wl.home}/classes:
      ${wl.home}/lib/weblogicaux.jar:
      ${wl.home}/lib/unpacked_jars/jndi.jar:
      ${wl.home}/lib/unpacked_jars/collections.zip"
    />
  </target>


  <!--*====================================================================*-->
  <!--* Target: init-api-props. Initializes the API build environment.     *-->
  <!--*====================================================================*-->
  <target name="init-api-props">

    <!--*==================================================================*-->
    <!--* Initialize APIary build environment properties.                  *-->
    <!--*==================================================================*-->
    <property name="api.type" value="capi"/>
    <property name="api.build.compiler" value="bcj"/>
    <property name="api.home.dir" value="${user.home}/build"/>
    <property name="api.root.dir" value="${api.home.dir}/${api.build.dir}"/>
    <property name="api.src.dir" value="${api.root.dir}/src"/>
    <property name="api.lib.dir" value="${api.root.dir}/lib"/>
    <property name="api.bin.dir" value="${api.root.dir}/bin"/>
    <property name="api.sql.dir" value="${api.root.dir}/sql"/>
    <property name="api.meta.dir" value="${api.bin.dir}/META-INF"/>
    <property name="api.ids.version" value="3_1"/>


    <!--*==================================================================*-->
    <!--* Property used to identify the Java source files to be compiled   *-->
    <!--* in the build.                                                    *-->
    <!--*==================================================================*-->
    <property name="api.src.files"
      value="com/genomics/api/**/*.java,
      com/genomics/performance/**/*.java,
      com/genomics/server/**/*.java,
      com/genomics/shared/**/*.java,
      com/genomics/capi/**/*.java"
    />


    <!--*==================================================================*-->
    <!--* Property used to identify the Java class files to be included in *-->
    <!--* the interface and implementations JAR files.                     *-->
    <!--*==================================================================*-->
    <property name="api.class.files"
      value="com/genomics/api/**/*.class,
      com/genomics/performance/**/*.class,
      com/genomics/server/**/*.class,
      com/genomics/shared/**/*.class,
      com/genomics/capi/**/*.class"
    />

    <!--*==================================================================*-->
    <!--* Property used to identify the Java classpath used to build the   *-->
    <!--* API source files.                                                *-->
    <!--*==================================================================*-->
    <property name="api.classpath"
      value="${api.bin.dir}:
      ${api.lib.dir}/server/rdbms/jdbc/oracle/classes12.zip:
      ${api.lib.dir}/server/erights/classes.jar:
      ${wl.classpath}"
    />

    <!--*==================================================================*-->
    <!--* Check for the existence of JAR files built previously.           *-->
    <!--*==================================================================*-->
    <available file="${api.bin.dir}/${api.type}_interfaces.jar" property="api.inter.jar.exists" value="true"/>
    <available file="${api.bin.dir}/${api.type}_impls.jar" property="api.impls.jar.exists" value="true"/>
    <available file="${api.bin.dir}/${api.type}_resource.jar" property="api.res.jar.exists" value="true"/>
    <available file="${api.bin.dir}/${api.type}_sql.jar" property="api.sql.jar.exists" value="true"/>

    <!--*==================================================================*-->
    <!--* Check for the existence of the build and local deployment        *-->
    <!--* directories.                                                     *-->
    <!--*==================================================================*-->
    <available file="${api.root.dir}" property="build.dir.exists" value="true"/>
    <available file="${wl.home}/genomics/${api.type}" property="deploy.dir.exists" value="true"/>

    <echo message="Build environment has been initialized..."/>
  </target>


  <!--*====================================================================*-->
  <!--* Java tasks.                                                        *-->
  <!--*====================================================================*-->

  <!--*====================================================================*-->
  <!--* Target: java-compile. Compiles the source code.                    *-->
  <!--*====================================================================*-->
  <target name="java-compile" depends="api-src-dir-exists,api-src-files-exists,api-classpath-exists,api-bin-dir-exists,api-build-compiler-exists">
    <echo message="Compiling source files..."/>

    <bcj srcdir="${api.src.dir}"
      destdir="${api.bin.dir}"
      classpath="${api.classpath}"
      debug="${java.debug}"
      deprecation="${java.deprecation}"
      includes="${api.src.files}"
      nowarn="${java.nowarn}"
      quiet="${java.quiet}"
      depend="${java.depend}">
    </bcj>
  </target>

  <!--*====================================================================*-->
  <!--* Target: rmic. Compiles RMI classes, skeletons, and stubs.          *-->
  <!--*====================================================================*-->
  <target name="rmic" depends="api-src-dir-exists,api-src-files-exists,api-classpath-exists,api-bin-dir-exists">
    <echo message="Compiling RMI classes, skeletons, and stubs..."/>

    <java classname="weblogic.rmic" classpath="${api.classpath}" fork="yes">
      <arg value="-d"/>
      <arg value="${api.bin.dir}"/>
    </java>
  </target>


  <!--*====================================================================*-->
  <!--* Target: api-src-dir-exists. Determines if the API source           *-->
  <!--* directory property has been set.                                   *-->
  <!--*====================================================================*-->
  <target name="api-src-dir-exists" unless="api.src.dir">
    <echo message="ERROR: The API source directory property (api.src.dir) has not been set."/>
    <echo message="Please set this property in the project build XML file."/>
    <fail message="Invalid API source directory. Please see the error message above."/>
  </target>


  <!--*====================================================================*-->
  <!--* Target: api-bin-dir-exists. Determines if the API destination      *-->
  <!--* directory property has been set.                                   *-->
  <!--*====================================================================*-->
  <target name="api-bin-dir-exists" unless="api.bin.dir">
    <echo message="ERROR: The Java destination directory property (api.bin.dir) has not been set."/>
    <echo message="Please set this property in the project build XML file."/>
    <fail message="Invalid API destination directory. Please see the error message above."/>
  </target>


  <!--*====================================================================*-->
  <!--* Target: api-src-files-exists. Determines if the API source files   *-->
  <!--* property has been set.                                             *-->
  <!--*====================================================================*-->
  <target name="api-src-files-exists" unless="api.src.files">
    <echo message="ERROR: The API source files property (api.src.files) has not been set."/>
    <echo message="Please set this property in the project build XML file."/>
    <fail message="Invalid API source files property. Please see the error message above."/>
  </target>


  <!--*====================================================================*-->
  <!--* Target: api-classpath-exists. Determines if the API classpath      *-->
  <!--* property has been set.                                             *-->
  <!--*====================================================================*-->
  <target name="api-classpath-exists" unless="api.classpath">
    <echo message="ERROR: The API classpath property (api.classpath) has not been set. Please"/>
    <echo message="set this property in the project build XML file."/>
    <fail message="Invalid API classpath. Please see the error message above."/>
  </target>


  <!--*====================================================================*-->
  <!--* Target: api-build-compiler-exists. Determines if the build         *-->
  <!--* compiler property has been set.                                    *-->
  <!--*====================================================================*-->
  <target name="api-build-compiler-exists" unless="api.build.compiler">
    <echo message="ERROR: The build compiler property (api.build.compiler) has not been set."/>
    <echo message="Please set this property in the project build XML file."/>
    <fail message="Invalid build compiler. Please see the error message above."/>
  </target>



  <!--*====================================================================*-->
  <!--* Interfaces JAR targets - includes EJB compilation.                 *-->
  <!--*====================================================================*-->

  <!--*====================================================================*-->
  <!--* Target: ejb-compile. Generates and runs the RMI compiler on the    *-->
  <!--* EJB client-side stubs and server-side skeletons.                   *-->
  <!--*====================================================================*-->
  <target name="create-interfaces-jar" depends="delete-interfaces-jar,wl-home-exists,wl-classpath-exists">
    <echo message="Creating EJB interfaces JAR file..."/>

    <!--*==================================================================*-->
    <!--* Create the META-INF directory and copy the deployment            *-->
    <!--* descriptors to the directory.                                    *-->
    <!--*==================================================================*-->
    <mkdir dir="${api.meta.dir}"/>

    <copy
      file="${api.bin.dir}/resource/server/weblogic/${api.type}/ejb-jar.xml"
      tofile="${api.meta.dir}/ejb-jar.xml"
      overwrite="yes"
    />

    <copy
      file="${api.bin.dir}/resource/server/weblogic/${api.type}/weblogic-ejb-jar.xml"
      tofile="${api.meta.dir}/weblogic-ejb-jar.xml"
      overwrite="yes"
    />

    <!--*==================================================================*-->
    <!--* Create the EJB interfaces JAR file.                              *-->
    <!--*==================================================================*-->
    <EjbJar descriptordir="${api.meta.dir}"
      srcdir="${api.bin.dir}"
      basejarname="${api.type}_interfaces">
      <weblogic destdir="${api.bin.dir}"
        compiler="${api.build.compiler}"
        classpath="${api.classpath}"
      />
      <include name="**/ejb-jar.xml"/>
      <exclude name="**/weblogic*.xml"/>
    </EjbJar>

    <property name="api.inter.jar.exists" value="true"/>

    <!--*==================================================================*-->
    <!--* Delete the temporary copies of the EJB deployment descriptors.   *-->
    <!--*==================================================================*-->
    <delete dir="${api.meta.dir}"/>
  </target>


  <!--*====================================================================*-->
  <!--* Target: wl-home-exists. Determines if the WebLogic home property   *-->
  <!--* has been set.                                                      *-->
  <!--*====================================================================*-->
  <target name="wl-home-exists" unless="wl.home">
    <echo message="ERROR: The WebLogic home property (wl.home) has not been set. Please set this"/>
    <echo message="property in the project build XML file."/>
    <fail message="Invalid WebLogic home location. Please see the error message above."/>
  </target>


  <!--*====================================================================*-->
  <!--* Target: wl-classpath-exists. Determines if the WebLogic classpath  *-->
  <!--* property has been set.                                             *-->
  <!--*====================================================================*-->
  <target name="wl-classpath-exists" unless="wl.classpath">
    <echo message="ERROR: The WebLogic classpath property (wl.classpath) has not been set."/>
    <echo message="Please set this property in the project build XML file."/>
    <fail message="Invalid WebLogic classpath. Please see the error message above."/>
  </target>


  <!--*====================================================================*-->
  <!--* Target: delete-interfaces-jar. Delete the EJB interfaces JAR file  *-->
  <!--* if it exists.                                                      *-->
  <!--*====================================================================*-->
  <target name="delete-interfaces-jar" if="api.inter.jar.exists">
    <delete file="${api.bin.dir}/${api.type}_interfaces.jar"/>
  </target>


  <!--*====================================================================*-->
  <!--* Target: deploy-to-devel. Deploys the interfaces JAR to the local   *-->
  <!--* development server.                                                *-->
  <!--*====================================================================*-->
  <target name="deploy-to-devel">
    <copy file="${api.bin.dir}/${api.type}_interfaces.jar"
      tofile="${wl.home}/genomics/${api.type}/${api.type}_interfaces.jar"
      overwrite="yes"
    />
  </target>


  <!--*====================================================================*-->
  <!--* Implementation JAR targets.                                        *-->
  <!--*====================================================================*-->

  <!--*====================================================================*-->
  <!--* Target: create-impls-jar. Creates the EJB implementations JAR file.*-->
  <!--*====================================================================*-->
  <target name="create-impls-jar" depends="delete-impls-jar">
    <echo message="Creating EJB implementation JAR file..."/>

    <jar jarfile="${api.bin.dir}/${api.type}_impls.jar"
      basedir="${api.bin.dir}"
      whenempty="fail"
      includes="${api.class.files}"
    />

    <property name="api.impls.jar.exists" value="true"/>
  </target>


  <!--*====================================================================*-->
  <!--* Target: delete-impls-jar. Deletes the EJB implementation JAR file  *-->
  <!--* if it exists.                                                      *-->
  <!--*====================================================================*-->
  <target name="delete-impls-jar" if="api.impls.jar.exists">
    <delete file="${api.bin.dir}/${api.type}_impls.jar"/>
  </target>


  <!--*====================================================================*-->
  <!--* Resource JAR targets.                                              *-->
  <!--*====================================================================*-->

  <!--*====================================================================*-->
  <!--* Target: create-resource-jar. Creates the EJB resource JAR file.    *-->
  <!--*====================================================================*-->
  <target name="create-resource-jar" depends="delete-resource-jar">
    <echo message="Creating EJB resource JAR file..."/>

    <jar jarfile="${api.bin.dir}/${api.type}_resource.jar"
      basedir="${api.bin.dir}"
      includes="resource/server/**,resource/shared/**"
      excludes="resource/server/weblogic/**"
      whenempty="fail"
    />

    <property name="api.res.jar.exists" value="true"/>
  </target>


  <!--*====================================================================*-->
  <!--* Target: delete-resource-jar. Deletes the EJB resource JAR file if  *-->
  <!--* it exists.                                                         *-->
  <!--*====================================================================*-->
  <target name="delete-resource-jar" if="api.res.jar.exists">
    <delete file="${api.bin.dir}/${api.type}_resource.jar"/>
  </target>


  <!--*====================================================================*-->
  <!--* SQL JAR targets.                                                   *-->
  <!--*====================================================================*-->

  <!--*====================================================================*-->
  <!--* Target: create-sql-jar. Creates the Oracle SQL JAR file.           *-->
  <!--*====================================================================*-->
  <target name="create-sql-jar" depends="delete-sql-jar">
    <echo message="Creating Oracle SQL JAR file..."/>

    <jar jarfile="${api.bin.dir}/${api.type}_sql.jar"
      basedir="${api.sql.dir}/oracle/${api.ids.version}"
      includes="**/*.sql"
      whenempty="fail"
    />

    <property name="api.sql.jar.exists" value="true"/>
  </target>


  <!--*====================================================================*-->
  <!--* Target: delete-sql-jar. Deletes the Oracle SQL JAR file if it      *-->
  <!--* exists.                                                            *-->
  <!--*====================================================================*-->
  <target name="delete-sql-jar" if="api.sql.jar.exists">
    <delete file="${api.bin.dir}/${api.type}_sql.jar"/>
  </target>


  <!--*====================================================================*-->
  <!--* Servlet JAR targets.                                               *-->
  <!--*====================================================================*-->

  <!--*====================================================================*-->
  <!--* Target: create-feature-scan-jar. Create the FeatureScan servlet    *-->
  <!--* JAR file.                                                          *-->
  <!--*====================================================================*-->
  <target name="create-feature-scan-jar" depends="delete-feature-scan-jar">
    <echo message="Creating FeatureScan servlet JAR file..."/>

    <jar jarfile="${api.bin.dir}/FeatureServlet.jar"
      basedir="${api.bin.dir}"
      includes="com/genomics/servlet/feature_scan/**/*"
      whenempty="fail"
    />

    <property name="feature.scan.jar.exists" value="true"/>
  </target>


  <!--*====================================================================*-->
  <!--* Target: delete-feature-scan-jar. Deletes the FeatureScan servlet   *-->
  <!--* JAR file if it exists.                                             *-->
  <!--*====================================================================*-->
  <target name="delete-feature-scan-jar" if="feature.scan.jar.exists">
    <delete file="${api.bin.dir}/FeatureServlet.jar"/>
  </target>

</project>

