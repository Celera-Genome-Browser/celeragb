<?xml version="1.0" encoding="US-ASCII"?>
<!--
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Copyright (c) 1999 - 2006 Applera Corporation.
 301 Merritt 7 
 P.O. Box 5435 
 Norwalk, CT 06856-5435 USA

 This is free software; you can redistribute it and/or modify it under the 
 terms of the GNU Lesser General Public License as published by the 
 Free Software Foundation; version 2.1 of the License.

 This software is distributed in the hope that it will be useful, but 
 WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 or FITNESS FOR A PARTICULAR PURPOSE. 
 See the GNU Lesser General Public License for more details.

 You should have received a copy of the GNU Lesser General Public License 
 along with this software; if not, write to the Free Software Foundation, Inc.
 59 Temple Place, Suite 330, Boston, MA 02111-1307 USA 
 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
-->

<!--*================================================================================*-->
<!--* FILE:                                                                          *-->
<!--*    cvs_manage_code.xml                                                         *-->
<!--* DESCRIPTION:                                                                   *-->
<!--*    XML build instructions file used by Ant to manage the code repository. The  *-->
<!--*    useful targets can be seen by executing the following on a command line:    *-->
<!--*                                                                                *-->
<!--*    ant -projecthelp -buildfile ./cvs_manage_code.xml                           *-->
<!--*                                                                                *-->
<!--* PROPERTIES:                                                                    *-->
<!--*    api.type                - Mandatory. The API type being built. Valid values *-->
<!--*                              are:                                              *-->
<!--*                                  gbapi - Genome Browser APIs                   *-->
<!--*                                  capi  - Genomics APIs                         *-->
<!--*                              The type is passed in on the command line.        *-->
<!--*    api.home.dir            - Mandatory. The home directory in which all builds *-->
<!--*                              are done.                                         *-->
<!--*    api.build.dir           - Mandatory. The build subdirectory.                *-->
<!--*    api.root.dir            - The fully-qualified root build directory. This    *-->
<!--*                              property is assumed to be concatenation of the    *-->
<!--*                              home and build directory properties.              *-->
<!--*    api.bin.dir             - The directory containing shell scripts, class     *-->
<!--*                              files, JAR files, and resource files. This        *-->
<!--*                              property is assumed to be the concatenation of    *-->
<!--*                              the root directory property and \bin.             *-->
<!--*    api.archive.dir         - The directory that hold the build archive files.  *-->
<!--*                                                                                *-->
<!--*                                                                                *-->
<!--*    build.dir.exists        - The build directory exists.                       *-->
<!--*    archive.dir.exists      - The build archive directory exists.               *-->
<!--*                                                                                *-->
<!--*                                                                                *-->
<!--*    cvs.module              - The name of the CVS module to checkout or update. *-->
<!--*                              The module name must be specified in the project  *-->
<!--*                              build instructions XML file.                      *-->
<!--*    cvs.branch.tag          - The tag to use to identify the code branch to be  *-->
<!--*                              worked on. Defaults to HEAD.                      *-->
<!--*    cvs.tag                 - The tag that will be created, deleted, moved, or  *-->
<!--*                              used to create or delete a branch.                *-->
<!--*    cvs.time.filter         - The timestamp to use to filter the code being     *-->
<!--*                              tagged or branched. The timestamp should be       *-->
<!--*                              formatted as YYYY-MM-DD HH:MM-TT:OO where:        *-->
<!--*                                  YYYY  - Year                                  *-->
<!--*                                  MM    - Month                                 *-->
<!--*                                  DD    - Day                                   *-->
<!--*                                  HH    - Hour                                  *-->
<!--*                                  MM    - Minute                                *-->
<!--*                                  TT:OO - Time zone offset                      *-->
<!--*    cvs.login.id            - The user ID used to login to CVS. The login       *-->
<!--*                              ID can be specified in the project build          *-->
<!--*                              instructions XML file.                            *-->
<!--*    cvs.passwd.file         - The location of the CVS password file for the     *-->
<!--*                              user. Defaults to the user's home directory. The  *-->
<!--*                              password file location can be overridden in the   *-->
<!--*                              project build instructions XML file.              *-->
<!--*    cvs.server.host         - The CVS host server. The server host name can     *-->
<!--*                              be overridden in the project build instructions   *-->
<!--*                              XML file.                                         *-->
<!--*    cvs.repository.root     - The server host directory location that is the    *-->
<!--*                              CVS repository root directory. The repository     *-->
<!--*                              root can be overridden in the project build       *-->
<!--*                              instructions XML file.                            *-->
<!--*    cvs.root                - The CVS root. The CVS root can be overridden in   *-->
<!--*                              the project build instructions XML file.          *-->
<!--*================================================================================*-->

<project name="cvs-manage-code" default="checkout" basedir=".">

  <!--*===================================================================*-->
  <!--* Target: checkout. Performs a CVS code checkout.                   *-->
  <!--*===================================================================*-->
  <target name="checkout" depends="init,make-build-dir,cvs-checkout" description="Checks out a CVS module to a build directory.">
    <echo message="Code checkout of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: update. Performs a CVS code update.                       *-->
  <!--*===================================================================*-->
  <target name="update" depends="init,make-build-dir,cvs-update" description="Updates the code in a build directory.">
    <echo message="Code checkout of ${api.type} for branch ${cvs.branch.tag} is complete..."/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: create-branch. Creates a new branch of the API code base. *-->
  <!--*===================================================================*-->
  <target name="create-branch" depends="init,cvs-create-branch" description="Creates a new branch of the API code base.">
    <echo message="Creation of branch ${cvs.tag} from code line ${cvs.branch.tag} is complete..."/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: create-tag. Creates a new tag on the API code base.       *-->
  <!--*===================================================================*-->
  <target name="create-tag" depends="init,cvs-create-tag" description="Creates a new tag on the API code base.">
    <echo message="Tagging of branch ${cvs.branch.tag} with tag ${cvs.tag} is complete..."/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: delete-tag. Deletes a tag from the API code base.         *-->
  <!--*===================================================================*-->
  <target name="delete-tag" depends="init,cvs-delete-tag" description="Deletes a tag from the API code base.">
    <echo message="Deletion of tag ${cvs.tag} from branch ${cvs.branch.tag} is complete..."/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: move-tag. Moves a tag from one code line to another in    *-->
  <!--* the API code base                                                 *-->
  <!--*===================================================================*-->
  <target name="move-tag" depends="init,cvs-move-tag" description="Moves a tag from one code line to another in the API code base.">
    <echo message="Move of tag ${cvs.tag} to branch ${cvs.branch.tag} is complete..."/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: archive-build. Archives a build directory to an archive   *-->
  <!--* location and deletes the original build directory.                *-->
  <!--*===================================================================*-->
  <target name="archive-build" depends="init,archive-build-dir" description="Archives a build and deletes the original build directory.">
    <echo message="Archive of build ${api.build.dir} is complete..."/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: delete-build. Deletes the build in the specified          *-->
  <!--* directory.                                                        *-->
  <!--*===================================================================*-->
  <target name="delete-build" depends="init,delete-build-dir" description="Deletes the specified build.">
    <echo message="Delete of build ${api.build.dir} is complete..."/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: init. Initializes the build environment.                  *-->
  <!--*===================================================================*-->
  <target name="init" depends="init-tool-props,init-api-build-dir,init-api-props">
    <echo message="Starting code management for ${api.type} branch ${cvs.branch.tag} at ${DSTAMP}-${TSTAMP}..."/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: init-tool-props. Initializes properties for all           *-->
  <!--* third-party tools.                                                *-->
  <!--*===================================================================*-->
  <target name="init-tool-props">
    <tstamp/>
    <echo message="Initializing the APIary code management environment..."/>

    <!--*================================================================*-->
    <!--* Allow property overrides.                                      *-->
    <!--*================================================================*-->
    <property file="${api.props.file}"/>

    <!--*================================================================*-->
    <!--* Initialize mandatory and optional CVS properties that have not *-->
    <!--* been set.                                                      *-->
    <!--*================================================================*-->
    <property name="cvs.module" value=""/>
    <property name="cvs.branch.tag" value=""/>
    <property name="cvs.login.id" value=""/>
    <property name="cvs.passwd.file" value=""/>
    <property name="cvs.server.host" value=""/>
    <property name="cvs.repository.root" value=""/>
    <property name="cvs.root" value=""/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: init-api-build-dir. Initializes the build subdirectory    *-->
  <!--* property if it is not specified on the command line.              *-->
  <!--*===================================================================*-->
  <target name="init-api-build-dir" unless="api.build.dir">
    <property name="api.build.dir" value="${DSTAMP}_${TSTAMP}_${api.type}_${cvs.branch.tag}"/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: init-api-props. Initializes the API build environment.    *-->
  <!--*===================================================================*-->
  <target name="init-api-props">

    <!--*================================================================*-->
    <!--* Initialize APIary build environment properties.                *-->
    <!--*================================================================*-->
    <property name="api.home.dir" value="${user.home}/build"/>
    <property name="api.root.dir" value="${api.home.dir}/${api.build.dir}"/>
    <property name="api.bin.dir" value="${api.root.dir}/bin"/>
    <property name="api.archive.dir" value="${user.home}/archives"/>


    <!--*================================================================*-->
    <!--* Check for the existence of the build and archive directories.  *-->
    <!--*================================================================*-->
    <available file="${api.root.dir}" property="build.dir.exists" value="true"/>
    <available file="${api.archive.dir}" property="archive.dir.exists" value="true"/>

    <echo message="The APIary code management environment has been initialized..."/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: make-build-dir. Create the build directory.               *-->
  <!--*===================================================================*-->
  <target name="make-build-dir" unless="build.dir.exists" depends="init">
    <mkdir dir="${api.root.dir}"/>
  </target>


  <!--*===================================================================*-->
  <!--* CVS tasks.                                                        *-->
  <!--*===================================================================*-->

  <!--*===================================================================*-->
  <!--* Target: cvs-checkout. Checks out the CVS module for the specified *-->
  <!--* branch from CVS.                                                  *-->
  <!--*===================================================================*-->
  <target name="cvs-checkout" depends="cvs-module-exists,cvs-passwd-file-exists" unless="build.dir.exists">
    <echo message="Checking out module ${cvs.module} branch ${cvs.branch.tag} from CVS..."/>

    <cvs cvsRoot="${cvs.root}"
      package="${cvs.module}"
      command="checkout -P -d ${api.root.dir}"
      dest="${api.root.dir}"
      tag="${cvs.branch.tag}"
    />
  </target>


  <!--*===================================================================*-->
  <!--* Target: cvs-update. Updates the specified build files from CVS.   *-->
  <!--*===================================================================*-->
  <target name="cvs-update" depends="cvs-module-exists,cvs-passwd-file-exists" if="build.dir.exists">
    <echo message="Updating module ${cvs.module} branch ${cvs.branch.tag} from CVS..."/>
    <cvs cvsRoot="${cvs.root}" command="update -P -d" dest="${api.root.dir}"/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: cvs-create-branch. Branches the specified API code line.  *-->
  <!--*===================================================================*-->
  <target name="cvs-create-branch" depends="cvs-module-exists,cvs-passwd-file-exists">
    <echo message="Creating of branch ${cvs.tag} from code line ${cvs.branch.tag}..."/>
    <cvs cvsRoot="${cvs.root}" package="${cvs.module}" command="rtag -b -a -r ${cvs.branch.tag} ${cvs.tag}"/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: cvs-create-tag. Creates a new tag on the API code base.   *-->
  <!--*===================================================================*-->
  <target name="cvs-create-tag" depends="cvs-module-exists,cvs-passwd-file-exists,cvs-create-tag-filtered,cvs-create-tag-unfiltered">
  </target>


  <!--*===================================================================*-->
  <!--* Target: cvs-create-tag-filtered. Creates a new tag on the API     *-->
  <!--* code base filtered by a timestamp.                                *-->
  <!--*===================================================================*-->
  <target name="cvs-create-tag-filtered" if="cvs.time.filter">
    <echo message="Tagging branch ${cvs.branch.tag} with tag ${cvs.tag} using date filter ${cvs.time.filter}..."/>
    <cvs cvsRoot="${cvs.root}" package="${cvs.module}" command="rtag -a -D ${cvs.time.filter} ${cvs.tag}"/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: cvs-create-tag-unfiltered. Creates a new tag on the API   *-->
  <!--* code base filtered by branch tag.                                 *-->
  <!--*===================================================================*-->
  <target name="cvs-create-tag-unfiltered" unless="cvs.time.filter">
    <echo message="Tagging branch ${cvs.branch.tag} with tag ${cvs.tag}..."/>
    <cvs cvsRoot="${cvs.root}" package="${cvs.module}" command="rtag -a -r ${cvs.branch.tag} ${cvs.tag}"/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: cvs-delete-tag. Deletes a tag from the API code base.     *-->
  <!--*===================================================================*-->
  <target name="cvs-delete-tag" depends="cvs-module-exists,cvs-passwd-file-exists,cvs-delete-tag-filtered,cvs-delete-tag-unfiltered">
  </target>


  <!--*===================================================================*-->
  <!--* Target: cvs-delete-tag-filtered. Deletes a tag on the API code    *-->
  <!--* base filtered by a timestamp.                                     *-->
  <!--*===================================================================*-->
  <target name="cvs-delete-tag-filtered" if="cvs.time.filter">
    <echo message="Deleting tag ${cvs.tag} from branch ${cvs.branch.tag} using date filter ${cvs.time.filter}..."/>
    <cvs cvsRoot="${cvs.root}" package="${cvs.module}" command="rtag -a -d -D ${cvs.time.filter} ${cvs.tag}"/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: cvs-delete-tag-unfiltered. Deletes a tag on the API code  *-->
  <!--* base filtered by branch tag.                                      *-->
  <!--*===================================================================*-->
  <target name="cvs-delete-tag-unfiltered" unless="cvs.time.filter">
    <echo message="Deleting tag ${cvs.tag} from branch ${cvs.branch.tag}..."/>
    <cvs cvsRoot="${cvs.root}" package="${cvs.module}" command="rtag -a -d -r ${cvs.branch.tag} ${cvs.tag}"/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: cvs-move-tag. Moves a tag to a new revision in the API    *-->
  <!--* code base.                                                        *-->
  <!--*===================================================================*-->
  <target name="cvs-move-tag" depends="cvs-module-exists,cvs-passwd-file-exists,cvs-move-tag-filtered,cvs-move-tag-unfiltered">
  </target>


  <!--*===================================================================*-->
  <!--* Target: cvs-move-tag-filtered. Moves a tag to a new revision in   *-->
  <!--* the API code base filtered by a timestamp.                        *-->
  <!--*===================================================================*-->
  <target name="cvs-move-tag-filtered" if="cvs.time.filter">
    <echo message="Moving tag ${cvs.tag} to branch ${cvs.branch.tag} using date filter ${cvs.time.filter}..."/>
    <cvs cvsRoot="${cvs.root}" package="${cvs.module}" command="rtag -a -F -D ${cvs.time.filter} ${cvs.tag}"/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: cvs-move-tag-unfiltered. Moves a tag to a new revision in *-->
  <!--* the API code base filtered by branch tag.                         *-->
  <!--*===================================================================*-->
  <target name="cvs-move-tag-unfiltered" unless="cvs.time.filter">
    <echo message="Moving tag ${cvs.tag} to branch ${cvs.branch.tag}..."/>
    <cvs cvsRoot="${cvs.root}" package="${cvs.module}" command="rtag -a -F -r ${cvs.branch.tag} ${cvs.tag}"/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: cvs-module-exists. Determines if the CVS module property  *-->
  <!--* has been set.                                                     *-->
  <!--*===================================================================*-->
  <target name="cvs-module-exists" unless="cvs.module">
    <echo message="ERROR: The CVS module property (cvs.module) has not been set. Please set this"/>
    <echo message="property in the project build XML file."/>
    <fail message="Invalid CVS module name. Please see the error message above."/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: cvs-passwd-file-exists. Checks for the existence of the   *-->
  <!--* CVS password file for the user.                                   *-->
  <!--*===================================================================*-->
  <target name="cvs-passwd-file-exists">
    <available file="${cvs.passwd.file}" property="cvs.isLoggedIn" value="true"/>
    <echo message="Checked for .cvspass file: ${cvs.passwd.file}   Exists: ${cvs.isLoggedIn}   OS: ${os.name}"/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: cvs-login. Log in to CVS.                                 *-->
  <!--*===================================================================*-->
  <target name="cvs-login" unless="cvs.isLoggedIn">
    <echo message="Logging in to CVS..."/>
    <cvs cvsRoot="${cvs.root}" command="login"/>
    <property name="cvs.isLoggedIn" value="true"/>
  </target>




  <!--*===================================================================*-->
  <!--* Miscellaneous code management tasks.                              *-->
  <!--*===================================================================*-->

  <!--*===================================================================*-->
  <!--* Target: archive-build-dir. Archives the specified build and       *-->
  <!--* deletes the original build directory.                             *-->
  <!--*===================================================================*-->
  <target name="archive-build-dir" depends="init" if="build.dir.exists">
    <echo message="Archiving build ${api.build.dir} to ${api.archive.dir}..."/>

    <jar jarfile="${api.archive.dir}/${api.build.dir}.jar"
      basedir="${api.root.dir}"
      includes="**/*"
      whenempty="fail"
    />

    <delete dir="${api.root.dir}"/>
  </target>


  <!--*===================================================================*-->
  <!--* Target: delete-build-dir. Deletes the specified build.            *-->
  <!--*===================================================================*-->
  <target name="delete-build-dir" depends="init" if="build.dir.exists">
    <echo message="Deleting build directory ${api.build.dir}..."/>
    <delete dir="${api.root.dir}"/>
  </target>
</project>

